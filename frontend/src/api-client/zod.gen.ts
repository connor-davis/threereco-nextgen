// This file is auto-generated by @hey-api/openapi-ts
import { z } from 'zod';

export const zAddress = z.union([
  z.object({
    city: z.string(),
    country: z.string(),
    lineOne: z.string(),
    lineTwo: z.union([z.string(), z.null()]),
    province: z.string(),
    zipCode: z.string(),
  }),
  z.null(),
]);

export const zAssignBusiness = z.object({
  id: z.uuid(),
});

export const zAssignBusinesses = z.array(zAssignBusiness);

export const zAssignCollectionMaterial = z.object({
  carbonFactor: z.string(),
  gwCode: z.string(),
  name: z.string(),
  value: z.number().gte(0),
  weight: z.number().gte(0),
});

export const zAssignCollectionMaterials = z.array(zAssignCollectionMaterial);

export const zAssignMaterial = z.object({
  id: z.uuid(),
});

export const zAssignMaterials = z.array(zAssignMaterial);

export const zAssignRole = z.object({
  id: z.uuid(),
});

export const zAssignRoles = z.array(zAssignRole);

export const zAssignTransactionMaterial = z.object({
  carbonFactor: z.string(),
  gwCode: z.string(),
  id: z.optional(z.uuid()),
  name: z.string(),
  value: z.number().gte(0),
  weight: z.number().gte(0),
});

export const zAssignTransactionMaterials = z.array(zAssignTransactionMaterial);

export const zAssignUser = z.object({
  id: z.uuid(),
});

export const zAssignUsers = z.array(zAssignUser);

export const zBankDetails = z.union([
  z.object({
    accountHolder: z.string(),
    accountNumber: z.string(),
    bankName: z.string(),
    branchCode: z.string(),
  }),
  z.null(),
]);

export const zRole = z.object({
  createdAt: z.iso.datetime(),
  default: z.boolean(),
  description: z.string(),
  id: z.uuid(),
  name: z.string(),
  permissions: z.array(
    z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
  ),
  updatedAt: z.iso.datetime(),
});

export const zRoles = z.array(zRole);

export const zUser = z.object({
  address: zAddress,
  bankDetails: zBankDetails,
  businessId: z.union([z.uuid(), z.null()]),
  get businesses() {
    return z.array(zBusiness);
  },
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  mfaEnabled: z.boolean(),
  mfaVerified: z.boolean(),
  name: z.string(),
  permissions: z.array(
    z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
  ),
  roles: zRoles,
  type: z.enum(['system', 'collector', 'business']),
  updatedAt: z.iso.datetime(),
  username: z
    .string()
    .regex(
      /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
    ),
});

export const zBusiness = z.object({
  address: zAddress,
  bankDetails: zBankDetails,
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  name: z.string(),
  ownerId: z.uuid(),
  roles: zRoles,
  updatedAt: z.iso.datetime(),
  users: z.array(zUser),
});

export const zBusinesses = z.array(zBusiness);

export const zCollectionMaterial = z.object({
  carbonFactor: z.optional(z.string()),
  createdAt: z.iso.datetime(),
  gwCode: z.optional(z.string()),
  id: z.uuid(),
  name: z.optional(z.string()),
  updatedAt: z.iso.datetime(),
  value: z.number().gte(0),
  weight: z.number().gte(0),
});

export const zCollectionMaterials = z.array(zCollectionMaterial);

export const zCollection = z.object({
  buyer: zBusiness,
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  materials: zCollectionMaterials,
  seller: zUser,
  updatedAt: z.iso.datetime(),
});

export const zCollections = z.array(zCollection);

export const zCreateBusiness = z.object({
  address: zAddress,
  bankDetails: zBankDetails,
  name: z.string(),
  ownerId: z.uuid(),
});

export const zCreateCollection = z.object({
  buyerId: z.uuid(),
  materials: zAssignCollectionMaterials,
  sellerId: z.uuid(),
});

export const zCreateCollectionMaterial = z.object({
  carbonFactor: z.string(),
  gwCode: z.string(),
  name: z.string(),
  value: z.number().gte(0),
  weight: z.number().gte(0),
});

export const zCreateMaterial = z.object({
  carbonFactor: z.string(),
  gwCode: z.string(),
  name: z.string(),
});

export const zCreateRole = z.object({
  description: z.string(),
  name: z.string(),
  permissions: z.array(
    z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
  ),
});

export const zCreateTransaction = z.object({
  buyerId: z.uuid(),
  materials: zAssignTransactionMaterials,
  sellerId: z.uuid(),
});

export const zCreateTransactionMaterial = z.object({
  carbonFactor: z.string(),
  gwCode: z.string(),
  name: z.string(),
  value: z.number().gte(0),
  weight: z.number().gte(0),
});

export const zCreateUser = z.object({
  address: zAddress,
  bankDetails: zBankDetails,
  businessId: z.optional(z.uuid()),
  businesses: zAssignBusinesses,
  name: z.string(),
  permissions: z.array(
    z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
  ),
  roles: zAssignRoles,
  type: z.enum(['system', 'collector', 'business']),
  username: z
    .string()
    .regex(
      /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
    ),
});

export const zErrorResponse = z.object({
  error: z.string(),
  message: z.string(),
});

export const zMaterial = z.object({
  carbonFactor: z.string(),
  createdAt: z.iso.datetime(),
  gwCode: z.string(),
  id: z.uuid(),
  name: z.string(),
  updatedAt: z.iso.datetime(),
});

export const zMaterials = z.array(zMaterial);

export const zPagination = z.object({
  count: z.int().default(0),
  currentPage: z.int().default(1),
  nextPage: z.int().default(1),
  pageSize: z.int().default(10),
  pages: z.int().default(1),
  previousPage: z.int().default(1),
});

export const zPermission = z.object({
  description: z.string(),
  label: z.string(),
  value: z.string(),
});

export const zPermissions = z.array(zPermission);

export const zPermissionGroup = z.object({
  name: z.string(),
  permissions: zPermissions,
  get subGroups() {
    return z.array(
      z.lazy((): any => {
        return zPermissionGroup;
      })
    );
  },
});

export const zPermissionGroups = z.array(zPermissionGroup);

export const zQuery = z.object({
  page: z.int().default(1),
  pageSize: z.int().default(10),
  searchTerm: z.string().default(''),
});

export const zTransactionMaterial = z.object({
  carbonFactor: z.optional(z.string()),
  createdAt: z.iso.datetime(),
  gwCode: z.optional(z.string()),
  id: z.uuid(),
  name: z.optional(z.string()),
  updatedAt: z.iso.datetime(),
  value: z.number().gte(0),
  weight: z.number().gte(0),
});

export const zTransactionMaterials = z.array(zTransactionMaterial);

export const zSuccessResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zTransaction = z.object({
  buyer: zBusiness,
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  materials: zTransactionMaterials,
  seller: zUser,
  updatedAt: z.iso.datetime(),
});

export const zTransactions = z.array(zTransaction);

export const zUpdateBusiness = z.object({
  address: zAddress,
  bankDetails: zBankDetails,
  name: z.string(),
  ownerId: z.uuid(),
});

export const zUpdateCollection = z.object({
  buyerId: z.union([z.uuid(), z.null()]),
  sellerId: z.union([z.uuid(), z.null()]),
});

export const zUpdateCollectionMaterial = z.object({
  carbonFactor: z.string(),
  gwCode: z.string(),
  name: z.string(),
  value: z.union([z.number().gte(0), z.null()]),
  weight: z.union([z.number().gte(0), z.null()]),
});

export const zUpdateMaterial = z.object({
  carbonFactor: z.union([z.string(), z.null()]),
  gwCode: z.union([z.string(), z.null()]),
  name: z.union([z.string(), z.null()]),
});

export const zUpdateRole = z.object({
  description: z.union([z.string(), z.null()]),
  name: z.union([z.string(), z.null()]),
  permissions: z.union([
    z.array(z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)),
    z.null(),
  ]),
});

export const zUpdateTransaction = z.object({
  buyerId: z.union([z.uuid(), z.null()]),
  sellerId: z.union([z.uuid(), z.null()]),
});

export const zUpdateTransactionMaterial = z.object({
  carbonFactor: z.string(),
  gwCode: z.string(),
  name: z.string(),
  value: z.union([z.number().gte(0), z.null()]),
  weight: z.union([z.number().gte(0), z.null()]),
});

export const zUpdateUser = z.object({
  address: zAddress,
  bankDetails: zBankDetails,
  businessId: z.optional(z.union([z.uuid(), z.null()])),
  businesses: zAssignBusinesses,
  name: z.union([z.string(), z.null()]),
  permissions: z.union([
    z.array(z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)),
    z.null(),
  ]),
  roles: zAssignRoles,
  type: z.enum(['system', 'collector', 'business']),
  username: z.union([
    z
      .string()
      .regex(
        /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
      ),
    z.null(),
  ]),
});

export const zUsers = z.array(zUser);

/**
 * Login payload
 */
export const zLoginPayload = z.object({
  password: z.string().min(8),
  username: z
    .string()
    .regex(
      /^(?:\+?1)?[2-9]\d{2}[2-9](?!11)\d{6}$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
    ),
});

/**
 * Register payload
 */
export const zRegisterPayload = z.object({
  name: z.string(),
  password: z.string().min(8),
  type: z.enum(['business', 'collector']),
  username: z
    .string()
    .regex(
      /^(?:\+?1)?[2-9]\d{2}[2-9](?!11)\d{6}$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
    ),
});

/**
 * Verify MFA payload
 */
export const zVerifyMfaPayload = z.object({
  code: z.string().length(6),
});

export const zGetApiAuthenticationCheckData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful authentication check.
 */
export const zGetApiAuthenticationCheckResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiAuthenticationLoginData = z.object({
  body: zLoginPayload,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Logged in successfully.
 */
export const zPostApiAuthenticationLoginResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiAuthenticationLogoutData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful logout.
 */
export const zPostApiAuthenticationLogoutResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiAuthenticationMfaEnableData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiAuthenticationMfaVerifyData = z.object({
  body: zVerifyMfaPayload,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful authentication check.
 */
export const zPostApiAuthenticationMfaVerifyResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiAuthenticationPermissionsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Permissions retrieved successfully.
 */
export const zGetApiAuthenticationPermissionsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiAuthenticationRegisterData = z.object({
  body: zRegisterPayload,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Registered successfully.
 */
export const zPostApiAuthenticationRegisterResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiBusinessesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Business's retrieved successfully.
 */
export const zGetApiBusinessesResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiBusinessesData = z.object({
  body: zCreateBusiness,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Business created successfully.
 */
export const zPostApiBusinessesResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiBusinessesAssignRoleByBusinessIdByRoleIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    businessId: z.uuid(),
    roleId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Role assigned to Business successfully.
 */
export const zPostApiBusinessesAssignRoleByBusinessIdByRoleIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zPostApiBusinessesAssignUserByBusinessIdByUserIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    businessId: z.uuid(),
    userId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * User assigned to Business successfully.
 */
export const zPostApiBusinessesAssignUserByBusinessIdByUserIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zGetApiBusinessesListRolesByBusinessIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    businessId: z.uuid(),
  }),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Role retrieved from Business successfully.
 */
export const zGetApiBusinessesListRolesByBusinessIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiBusinessesListUsersByBusinessIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    businessId: z.uuid(),
  }),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * User retrieved from Business successfully.
 */
export const zGetApiBusinessesListUsersByBusinessIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiBusinessesUnassignRoleByBusinessIdByRoleIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    businessId: z.uuid(),
    roleId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Role unassigned from Business successfully.
 */
export const zPostApiBusinessesUnassignRoleByBusinessIdByRoleIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zPostApiBusinessesUnassignUserByBusinessIdByUserIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    businessId: z.uuid(),
    userId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * User unassigned from Business successfully.
 */
export const zPostApiBusinessesUnassignUserByBusinessIdByUserIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zDeleteApiBusinessesByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Business deleted successfully.
 */
export const zDeleteApiBusinessesByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiBusinessesByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * Business retrieved successfully.
 */
export const zGetApiBusinessesByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiBusinessesByIdData = z.object({
  body: zUpdateBusiness,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Business updated successfully
 */
export const zPutApiBusinessesByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiCollectionsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Collection's retrieved successfully.
 */
export const zGetApiCollectionsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiCollectionsData = z.object({
  body: zCreateCollection,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Collection created successfully.
 */
export const zPostApiCollectionsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiCollectionsAssignMaterialByCollectionIdByMaterialIdData =
  z.object({
    body: z.optional(z.never()),
    path: z.object({
      collectionId: z.uuid(),
      materialId: z.uuid(),
    }),
    query: z.optional(z.never()),
  });

/**
 * Material assigned to Collection successfully.
 */
export const zPostApiCollectionsAssignMaterialByCollectionIdByMaterialIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zGetApiCollectionsListMaterialsByCollectionIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    collectionId: z.uuid(),
  }),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Material retrieved from Collection successfully.
 */
export const zGetApiCollectionsListMaterialsByCollectionIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiCollectionsMaterialsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Collection Material's retrieved successfully.
 */
export const zGetApiCollectionsMaterialsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiCollectionsMaterialsData = z.object({
  body: zCreateCollectionMaterial,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Collection Material created successfully.
 */
export const zPostApiCollectionsMaterialsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zDeleteApiCollectionsMaterialsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Collection Material deleted successfully.
 */
export const zDeleteApiCollectionsMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiCollectionsMaterialsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * Collection Material retrieved successfully.
 */
export const zGetApiCollectionsMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiCollectionsMaterialsByIdData = z.object({
  body: zUpdateCollectionMaterial,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Collection Material updated successfully
 */
export const zPutApiCollectionsMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdData =
  z.object({
    body: z.optional(z.never()),
    path: z.object({
      collectionId: z.uuid(),
      materialId: z.uuid(),
    }),
    query: z.optional(z.never()),
  });

/**
 * Material unassigned from Collection successfully.
 */
export const zPostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zDeleteApiCollectionsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Collection deleted successfully.
 */
export const zDeleteApiCollectionsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiCollectionsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * Collection retrieved successfully.
 */
export const zGetApiCollectionsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiCollectionsByIdData = z.object({
  body: zUpdateCollection,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Collection updated successfully
 */
export const zPutApiCollectionsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiMaterialsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Material's retrieved successfully.
 */
export const zGetApiMaterialsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiMaterialsData = z.object({
  body: zCreateMaterial,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Material created successfully.
 */
export const zPostApiMaterialsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zDeleteApiMaterialsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Material deleted successfully.
 */
export const zDeleteApiMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiMaterialsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * Material retrieved successfully.
 */
export const zGetApiMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiMaterialsByIdData = z.object({
  body: zUpdateMaterial,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Material updated successfully
 */
export const zPutApiMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiRolesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Role's retrieved successfully.
 */
export const zGetApiRolesResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiRolesData = z.object({
  body: zCreateRole,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Role created successfully.
 */
export const zPostApiRolesResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zDeleteApiRolesByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Role deleted successfully.
 */
export const zDeleteApiRolesByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiRolesByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * Role retrieved successfully.
 */
export const zGetApiRolesByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiRolesByIdData = z.object({
  body: zUpdateRole,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Role updated successfully
 */
export const zPutApiRolesByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiTransactionsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Transaction's retrieved successfully.
 */
export const zGetApiTransactionsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiTransactionsData = z.object({
  body: zCreateTransaction,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Transaction created successfully.
 */
export const zPostApiTransactionsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiTransactionsAssignMaterialByTransactionIdByMaterialIdData =
  z.object({
    body: z.optional(z.never()),
    path: z.object({
      transactionId: z.uuid(),
      materialId: z.uuid(),
    }),
    query: z.optional(z.never()),
  });

/**
 * Material assigned to Transaction successfully.
 */
export const zPostApiTransactionsAssignMaterialByTransactionIdByMaterialIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zGetApiTransactionsListMaterialsByTransactionIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    transactionId: z.uuid(),
  }),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Material retrieved from Transaction successfully.
 */
export const zGetApiTransactionsListMaterialsByTransactionIdResponse = z.object(
  {
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  }
);

export const zGetApiTransactionsMaterialsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Transaction Material's retrieved successfully.
 */
export const zGetApiTransactionsMaterialsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiTransactionsMaterialsData = z.object({
  body: zCreateTransactionMaterial,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Transaction Material created successfully.
 */
export const zPostApiTransactionsMaterialsResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zDeleteApiTransactionsMaterialsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Transaction Material deleted successfully.
 */
export const zDeleteApiTransactionsMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiTransactionsMaterialsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * Transaction Material retrieved successfully.
 */
export const zGetApiTransactionsMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiTransactionsMaterialsByIdData = z.object({
  body: zUpdateTransactionMaterial,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Transaction Material updated successfully
 */
export const zPutApiTransactionsMaterialsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdData =
  z.object({
    body: z.optional(z.never()),
    path: z.object({
      transactionId: z.uuid(),
      materialId: z.uuid(),
    }),
    query: z.optional(z.never()),
  });

/**
 * Material unassigned from Transaction successfully.
 */
export const zPostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdResponse =
  z.object({
    item: z.optional(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
      ])
    ),
    items: z.optional(
      z.array(
        z.union([
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            businessId: z.union([z.uuid(), z.null()]),
            businesses: z.array(zBusiness),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            roles: zRoles,
            type: z.enum(['system', 'collector', 'business']),
            updatedAt: z.iso.datetime(),
            username: z
              .string()
              .regex(
                /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
              ),
          }),
          z.object({
            createdAt: z.iso.datetime(),
            default: z.boolean(),
            description: z.string(),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(
              z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
            ),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.string(),
            createdAt: z.iso.datetime(),
            gwCode: z.string(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zCollectionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            buyer: zBusiness,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            materials: zTransactionMaterials,
            seller: zUser,
            updatedAt: z.iso.datetime(),
          }),
          z.object({
            carbonFactor: z.optional(z.string()),
            createdAt: z.iso.datetime(),
            gwCode: z.optional(z.string()),
            id: z.uuid(),
            name: z.optional(z.string()),
            updatedAt: z.iso.datetime(),
            value: z.number().gte(0),
            weight: z.number().gte(0),
          }),
          z.object({
            address: zAddress,
            bankDetails: zBankDetails,
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            ownerId: z.uuid(),
            roles: zRoles,
            updatedAt: z.iso.datetime(),
            users: z.array(zUser),
          }),
          z.object({
            name: z.string(),
            permissions: zPermissions,
            subGroups: z.array(zPermissionGroup),
          }),
        ])
      )
    ),
    pagination: z.optional(zPagination),
  });

export const zDeleteApiTransactionsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Transaction deleted successfully.
 */
export const zDeleteApiTransactionsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiTransactionsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * Transaction retrieved successfully.
 */
export const zGetApiTransactionsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiTransactionsByIdData = z.object({
  body: zUpdateTransaction,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Transaction updated successfully
 */
export const zPutApiTransactionsByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiUsersData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * User's retrieved successfully.
 */
export const zGetApiUsersResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiUsersData = z.object({
  body: zCreateUser,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * User created successfully.
 */
export const zPostApiUsersResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiUsersAssignRoleByUserIdByRoleIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    userId: z.uuid(),
    roleId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Role assigned to User successfully.
 */
export const zPostApiUsersAssignRoleByUserIdByRoleIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiUsersListRolesByUserIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    userId: z.uuid(),
  }),
  query: z.object({
    page: z.coerce.bigint().default(BigInt(1)),
    pageSize: z.coerce.bigint().default(BigInt(10)),
    preload: z.optional(z.array(z.string())),
    searchTerm: z.optional(z.string()),
    searchColumn: z.optional(z.array(z.string())),
  }),
});

/**
 * Role retrieved from User successfully.
 */
export const zGetApiUsersListRolesByUserIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPostApiUsersUnassignRoleByUserIdByRoleIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    userId: z.uuid(),
    roleId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Role unassigned from User successfully.
 */
export const zPostApiUsersUnassignRoleByUserIdByRoleIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zDeleteApiUsersByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * User deleted successfully.
 */
export const zDeleteApiUsersByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zGetApiUsersByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      preload: z.optional(z.array(z.string())),
    })
  ),
});

/**
 * User retrieved successfully.
 */
export const zGetApiUsersByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});

export const zPutApiUsersByIdData = z.object({
  body: zUpdateUser,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * User updated successfully
 */
export const zPutApiUsersByIdResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        businessId: z.union([z.uuid(), z.null()]),
        businesses: z.array(zBusiness),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        roles: zRoles,
        type: z.enum(['system', 'collector', 'business']),
        updatedAt: z.iso.datetime(),
        username: z
          .string()
          .regex(
            /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
          ),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        default: z.boolean(),
        description: z.string(),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(
          z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
        ),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zCollectionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        buyer: zBusiness,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: zTransactionMaterials,
        seller: zUser,
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        carbonFactor: z.optional(z.string()),
        createdAt: z.iso.datetime(),
        gwCode: z.optional(z.string()),
        id: z.uuid(),
        name: z.optional(z.string()),
        updatedAt: z.iso.datetime(),
        value: z.number().gte(0),
        weight: z.number().gte(0),
      }),
      z.object({
        address: zAddress,
        bankDetails: zBankDetails,
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        ownerId: z.uuid(),
        roles: zRoles,
        updatedAt: z.iso.datetime(),
        users: z.array(zUser),
      }),
    ])
  ),
  items: z.optional(
    z.array(
      z.union([
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          businessId: z.union([z.uuid(), z.null()]),
          businesses: z.array(zBusiness),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          roles: zRoles,
          type: z.enum(['system', 'collector', 'business']),
          updatedAt: z.iso.datetime(),
          username: z
            .string()
            .regex(
              /(?:\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b)|(?:\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{2,4}\)?[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}\b)/
            ),
        }),
        z.object({
          createdAt: z.iso.datetime(),
          default: z.boolean(),
          description: z.string(),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(
            z.string().regex(/^(\*|[a-zA-Z0-9]+(\.(\*|[a-zA-Z0-9]+))*)$/)
          ),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zCollectionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          buyer: zBusiness,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: zTransactionMaterials,
          seller: zUser,
          updatedAt: z.iso.datetime(),
        }),
        z.object({
          carbonFactor: z.optional(z.string()),
          createdAt: z.iso.datetime(),
          gwCode: z.optional(z.string()),
          id: z.uuid(),
          name: z.optional(z.string()),
          updatedAt: z.iso.datetime(),
          value: z.number().gte(0),
          weight: z.number().gte(0),
        }),
        z.object({
          address: zAddress,
          bankDetails: zBankDetails,
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          ownerId: z.uuid(),
          roles: zRoles,
          updatedAt: z.iso.datetime(),
          users: z.array(zUser),
        }),
        z.object({
          name: z.string(),
          permissions: zPermissions,
          subGroups: z.array(zPermissionGroup),
        }),
      ])
    )
  ),
  pagination: z.optional(zPagination),
});
