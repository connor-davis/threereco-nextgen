// This file is auto-generated by @hey-api/openapi-ts
import { z } from 'zod';

export const zAuditLog = z.object({
  createdAt: z.optional(z.iso.datetime()),
  data: z.optional(z.record(z.string(), z.unknown())),
  id: z.optional(z.uuid()),
  objectId: z.optional(z.uuid()),
  operationType: z.optional(z.string().min(1)),
  tableName: z.optional(z.string().min(1)),
  updatedAt: z.optional(z.iso.datetime()),
  user: z.optional(
    z.object({
      createdAt: z.optional(z.iso.datetime()),
      email: z.optional(z.email().min(1)),
      id: z.optional(z.uuid()),
      image: z.optional(z.union([z.string(), z.null()])),
      jobTitle: z.optional(z.union([z.string(), z.null()])),
      mfaEnabled: z.optional(z.boolean()).default(false),
      mfaVerified: z.optional(z.boolean()).default(false),
      modifiedById: z.optional(z.uuid()),
      name: z.optional(z.union([z.string(), z.null()])),
      phone: z.optional(z.union([z.string(), z.null()])),
      primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
      updatedAt: z.optional(z.iso.datetime()),
    })
  ),
  userId: z.optional(z.uuid()),
});

export const zError = z.object({
  error: z.optional(z.string()).default('Bad Request'),
  message: z
    .optional(z.string())
    .default(
      'The request could not be understood or was missing required parameters.'
    ),
});

export const zLoginPayload = z.object({
  Email: z.optional(z.email()),
  Password: z.optional(z.string().min(6).max(100)),
});

export const zMfaVerifyPayload = z.object({
  code: z.optional(z.string()),
});

export const zOrganization = z.object({
  createdAt: z.optional(z.iso.datetime()),
  domain: z.optional(z.string().min(1)),
  id: z.optional(z.uuid()),
  modifiedBy: z.optional(
    z.object({
      createdAt: z.optional(z.iso.datetime()),
      email: z.optional(z.email().min(1)),
      id: z.optional(z.uuid()),
      image: z.optional(z.union([z.string(), z.null()])),
      jobTitle: z.optional(z.union([z.string(), z.null()])),
      mfaEnabled: z.optional(z.boolean()).default(false),
      mfaVerified: z.optional(z.boolean()).default(false),
      modifiedById: z.optional(z.uuid()),
      name: z.optional(z.union([z.string(), z.null()])),
      phone: z.optional(z.union([z.string(), z.null()])),
      primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
      updatedAt: z.optional(z.iso.datetime()),
    })
  ),
  modifiedById: z.optional(z.uuid()),
  name: z.optional(z.string().min(1)),
  owner: z.optional(
    z.object({
      createdAt: z.optional(z.iso.datetime()),
      email: z.optional(z.email().min(1)),
      id: z.optional(z.uuid()),
      image: z.optional(z.union([z.string(), z.null()])),
      jobTitle: z.optional(z.union([z.string(), z.null()])),
      mfaEnabled: z.optional(z.boolean()).default(false),
      mfaVerified: z.optional(z.boolean()).default(false),
      modifiedById: z.optional(z.uuid()),
      name: z.optional(z.union([z.string(), z.null()])),
      phone: z.optional(z.union([z.string(), z.null()])),
      primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
      updatedAt: z.optional(z.iso.datetime()),
    })
  ),
  ownerId: z.optional(z.uuid()),
  roles: z.optional(
    z.array(
      z.object({
        createdAt: z.optional(z.iso.datetime()),
        description: z.optional(z.union([z.string(), z.null()])),
        id: z.optional(z.uuid()),
        modifiedById: z.optional(z.uuid()),
        name: z.optional(z.string().min(1)),
        permissions: z.optional(z.array(z.string())).default([]),
        updatedAt: z.optional(z.iso.datetime()),
      })
    )
  ),
  updatedAt: z.optional(z.iso.datetime()),
  users: z.optional(
    z.array(
      z.object({
        createdAt: z.optional(z.iso.datetime()),
        email: z.optional(z.email().min(1)),
        id: z.optional(z.uuid()),
        image: z.optional(z.union([z.string(), z.null()])),
        jobTitle: z.optional(z.union([z.string(), z.null()])),
        mfaEnabled: z.optional(z.boolean()).default(false),
        mfaVerified: z.optional(z.boolean()).default(false),
        modifiedById: z.optional(z.uuid()),
        name: z.optional(z.union([z.string(), z.null()])),
        phone: z.optional(z.union([z.string(), z.null()])),
        primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
        updatedAt: z.optional(z.iso.datetime()),
      })
    )
  ),
});

export const zRole = z.object({
  createdAt: z.optional(z.iso.datetime()),
  description: z.optional(z.union([z.string(), z.null()])),
  id: z.optional(z.uuid()),
  modifiedBy: z.optional(
    z.object({
      createdAt: z.optional(z.iso.datetime()),
      email: z.optional(z.email().min(1)),
      id: z.optional(z.uuid()),
      image: z.optional(z.union([z.string(), z.null()])),
      jobTitle: z.optional(z.union([z.string(), z.null()])),
      mfaEnabled: z.optional(z.boolean()).default(false),
      mfaVerified: z.optional(z.boolean()).default(false),
      modifiedById: z.optional(z.uuid()),
      name: z.optional(z.union([z.string(), z.null()])),
      phone: z.optional(z.union([z.string(), z.null()])),
      primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
      updatedAt: z.optional(z.iso.datetime()),
    })
  ),
  modifiedById: z.optional(z.uuid()),
  name: z.optional(z.string().min(1)),
  organizations: z.optional(
    z.array(
      z.object({
        createdAt: z.optional(z.iso.datetime()),
        domain: z.optional(z.string().min(1)),
        id: z.optional(z.uuid()),
        modifiedById: z.optional(z.uuid()),
        name: z.optional(z.string().min(1)),
        ownerId: z.optional(z.uuid()),
        updatedAt: z.optional(z.iso.datetime()),
      })
    )
  ),
  permissions: z.optional(z.array(z.string())).default([]),
  updatedAt: z.optional(z.iso.datetime()),
  users: z.optional(
    z.array(
      z.object({
        createdAt: z.optional(z.iso.datetime()),
        email: z.optional(z.email().min(1)),
        id: z.optional(z.uuid()),
        image: z.optional(z.union([z.string(), z.null()])),
        jobTitle: z.optional(z.union([z.string(), z.null()])),
        mfaEnabled: z.optional(z.boolean()).default(false),
        mfaVerified: z.optional(z.boolean()).default(false),
        modifiedById: z.optional(z.uuid()),
        name: z.optional(z.union([z.string(), z.null()])),
        phone: z.optional(z.union([z.string(), z.null()])),
        primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
        updatedAt: z.optional(z.iso.datetime()),
      })
    )
  ),
});

export const zSuccess = z.object({
  item: z.optional(
    z.object({
      createdAt: z.optional(z.iso.datetime()),
      email: z.optional(z.email().min(1)),
      id: z.optional(z.uuid()),
      image: z.optional(z.union([z.string(), z.null()])),
      jobTitle: z.optional(z.union([z.string(), z.null()])),
      mfaEnabled: z.optional(z.boolean()).default(false),
      mfaVerified: z.optional(z.boolean()).default(false),
      modifiedBy: z.optional(
        z.object({
          createdAt: z.optional(z.iso.datetime()),
          email: z.optional(z.email().min(1)),
          id: z.optional(z.uuid()),
          image: z.optional(z.union([z.string(), z.null()])),
          jobTitle: z.optional(z.union([z.string(), z.null()])),
          mfaEnabled: z.optional(z.boolean()).default(false),
          mfaVerified: z.optional(z.boolean()).default(false),
          modifiedById: z.optional(z.uuid()),
          name: z.optional(z.union([z.string(), z.null()])),
          phone: z.optional(z.union([z.string(), z.null()])),
          primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
          updatedAt: z.optional(z.iso.datetime()),
        })
      ),
      modifiedById: z.optional(z.uuid()),
      name: z.optional(z.union([z.string(), z.null()])),
      organizations: z.optional(
        z.array(
          z.object({
            createdAt: z.optional(z.iso.datetime()),
            domain: z.optional(z.string().min(1)),
            id: z.optional(z.uuid()),
            modifiedById: z.optional(z.uuid()),
            name: z.optional(z.string().min(1)),
            ownerId: z.optional(z.uuid()),
            updatedAt: z.optional(z.iso.datetime()),
          })
        )
      ),
      phone: z.optional(z.union([z.string(), z.null()])),
      primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
      roles: z.optional(
        z.array(
          z.object({
            createdAt: z.optional(z.iso.datetime()),
            description: z.optional(z.union([z.string(), z.null()])),
            id: z.optional(z.uuid()),
            modifiedById: z.optional(z.uuid()),
            name: z.optional(z.string().min(1)),
            permissions: z.optional(z.array(z.string())).default([]),
            updatedAt: z.optional(z.iso.datetime()),
          })
        )
      ),
      updatedAt: z.optional(z.iso.datetime()),
    })
  ),
  items: z.optional(
    z.array(
      z.array(
        z.object({
          createdAt: z.optional(z.iso.datetime()),
          email: z.optional(z.email().min(1)),
          id: z.optional(z.uuid()),
          image: z.optional(z.union([z.string(), z.null()])),
          jobTitle: z.optional(z.union([z.string(), z.null()])),
          mfaEnabled: z.optional(z.boolean()).default(false),
          mfaVerified: z.optional(z.boolean()).default(false),
          modifiedBy: z.optional(
            z.object({
              createdAt: z.optional(z.iso.datetime()),
              email: z.optional(z.email().min(1)),
              id: z.optional(z.uuid()),
              image: z.optional(z.union([z.string(), z.null()])),
              jobTitle: z.optional(z.union([z.string(), z.null()])),
              mfaEnabled: z.optional(z.boolean()).default(false),
              mfaVerified: z.optional(z.boolean()).default(false),
              modifiedById: z.optional(z.uuid()),
              name: z.optional(z.union([z.string(), z.null()])),
              phone: z.optional(z.union([z.string(), z.null()])),
              primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
              updatedAt: z.optional(z.iso.datetime()),
            })
          ),
          modifiedById: z.optional(z.uuid()),
          name: z.optional(z.union([z.string(), z.null()])),
          organizations: z.optional(
            z.array(
              z.object({
                createdAt: z.optional(z.iso.datetime()),
                domain: z.optional(z.string().min(1)),
                id: z.optional(z.uuid()),
                modifiedById: z.optional(z.uuid()),
                name: z.optional(z.string().min(1)),
                ownerId: z.optional(z.uuid()),
                updatedAt: z.optional(z.iso.datetime()),
              })
            )
          ),
          phone: z.optional(z.union([z.string(), z.null()])),
          primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
          roles: z.optional(
            z.array(
              z.object({
                createdAt: z.optional(z.iso.datetime()),
                description: z.optional(z.union([z.string(), z.null()])),
                id: z.optional(z.uuid()),
                modifiedById: z.optional(z.uuid()),
                name: z.optional(z.string().min(1)),
                permissions: z.optional(z.array(z.string())).default([]),
                updatedAt: z.optional(z.iso.datetime()),
              })
            )
          ),
          updatedAt: z.optional(z.iso.datetime()),
        })
      )
    )
  ),
  pageDetails: z.optional(
    z.union([
      z.object({
        count: z.optional(z.int().gte(0)),
        currentPage: z.optional(z.int().gte(1)),
        nextPage: z.optional(z.int().gte(2)),
        pages: z.optional(z.int().gte(0)),
        previousPage: z.optional(z.int().gte(1)),
      }),
      z.null(),
    ])
  ),
});

export const zUser = z.object({
  createdAt: z.optional(z.iso.datetime()),
  email: z.optional(z.email().min(1)),
  id: z.optional(z.uuid()),
  image: z.optional(z.union([z.string(), z.null()])),
  jobTitle: z.optional(z.union([z.string(), z.null()])),
  mfaEnabled: z.optional(z.boolean()).default(false),
  mfaVerified: z.optional(z.boolean()).default(false),
  modifiedBy: z.optional(
    z.object({
      createdAt: z.optional(z.iso.datetime()),
      email: z.optional(z.email().min(1)),
      id: z.optional(z.uuid()),
      image: z.optional(z.union([z.string(), z.null()])),
      jobTitle: z.optional(z.union([z.string(), z.null()])),
      mfaEnabled: z.optional(z.boolean()).default(false),
      mfaVerified: z.optional(z.boolean()).default(false),
      modifiedById: z.optional(z.uuid()),
      name: z.optional(z.union([z.string(), z.null()])),
      phone: z.optional(z.union([z.string(), z.null()])),
      primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
      updatedAt: z.optional(z.iso.datetime()),
    })
  ),
  modifiedById: z.optional(z.uuid()),
  name: z.optional(z.union([z.string(), z.null()])),
  organizations: z.optional(
    z.array(
      z.object({
        createdAt: z.optional(z.iso.datetime()),
        domain: z.optional(z.string().min(1)),
        id: z.optional(z.uuid()),
        modifiedById: z.optional(z.uuid()),
        name: z.optional(z.string().min(1)),
        ownerId: z.optional(z.uuid()),
        updatedAt: z.optional(z.iso.datetime()),
      })
    )
  ),
  phone: z.optional(z.union([z.string(), z.null()])),
  primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
  roles: z.optional(
    z.array(
      z.object({
        createdAt: z.optional(z.iso.datetime()),
        description: z.optional(z.union([z.string(), z.null()])),
        id: z.optional(z.uuid()),
        modifiedById: z.optional(z.uuid()),
        name: z.optional(z.string().min(1)),
        permissions: z.optional(z.array(z.string())).default([]),
        updatedAt: z.optional(z.iso.datetime()),
      })
    )
  ),
  updatedAt: z.optional(z.iso.datetime()),
});

export const zGetApiAuthenticationCheckData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful authentication check.
 */
export const zGetApiAuthenticationCheckResponse = z.object({
  item: z.optional(
    z.object({
      createdAt: z.optional(z.iso.datetime()),
      email: z.optional(z.email().min(1)),
      id: z.optional(z.uuid()),
      image: z.optional(z.union([z.string(), z.null()])),
      jobTitle: z.optional(z.union([z.string(), z.null()])),
      mfaEnabled: z.optional(z.boolean()).default(false),
      mfaVerified: z.optional(z.boolean()).default(false),
      modifiedBy: z.optional(
        z.object({
          createdAt: z.optional(z.iso.datetime()),
          email: z.optional(z.email().min(1)),
          id: z.optional(z.uuid()),
          image: z.optional(z.union([z.string(), z.null()])),
          jobTitle: z.optional(z.union([z.string(), z.null()])),
          mfaEnabled: z.optional(z.boolean()).default(false),
          mfaVerified: z.optional(z.boolean()).default(false),
          modifiedById: z.optional(z.uuid()),
          name: z.optional(z.union([z.string(), z.null()])),
          phone: z.optional(z.union([z.string(), z.null()])),
          primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
          updatedAt: z.optional(z.iso.datetime()),
        })
      ),
      modifiedById: z.optional(z.uuid()),
      name: z.optional(z.union([z.string(), z.null()])),
      organizations: z.optional(
        z.array(
          z.object({
            createdAt: z.optional(z.iso.datetime()),
            domain: z.optional(z.string().min(1)),
            id: z.optional(z.uuid()),
            modifiedById: z.optional(z.uuid()),
            name: z.optional(z.string().min(1)),
            ownerId: z.optional(z.uuid()),
            updatedAt: z.optional(z.iso.datetime()),
          })
        )
      ),
      phone: z.optional(z.union([z.string(), z.null()])),
      primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
      roles: z.optional(
        z.array(
          z.object({
            createdAt: z.optional(z.iso.datetime()),
            description: z.optional(z.union([z.string(), z.null()])),
            id: z.optional(z.uuid()),
            modifiedById: z.optional(z.uuid()),
            name: z.optional(z.string().min(1)),
            permissions: z.optional(z.array(z.string())).default([]),
            updatedAt: z.optional(z.iso.datetime()),
          })
        )
      ),
      updatedAt: z.optional(z.iso.datetime()),
    })
  ),
  items: z.optional(
    z.array(
      z.array(
        z.object({
          createdAt: z.optional(z.iso.datetime()),
          email: z.optional(z.email().min(1)),
          id: z.optional(z.uuid()),
          image: z.optional(z.union([z.string(), z.null()])),
          jobTitle: z.optional(z.union([z.string(), z.null()])),
          mfaEnabled: z.optional(z.boolean()).default(false),
          mfaVerified: z.optional(z.boolean()).default(false),
          modifiedBy: z.optional(
            z.object({
              createdAt: z.optional(z.iso.datetime()),
              email: z.optional(z.email().min(1)),
              id: z.optional(z.uuid()),
              image: z.optional(z.union([z.string(), z.null()])),
              jobTitle: z.optional(z.union([z.string(), z.null()])),
              mfaEnabled: z.optional(z.boolean()).default(false),
              mfaVerified: z.optional(z.boolean()).default(false),
              modifiedById: z.optional(z.uuid()),
              name: z.optional(z.union([z.string(), z.null()])),
              phone: z.optional(z.union([z.string(), z.null()])),
              primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
              updatedAt: z.optional(z.iso.datetime()),
            })
          ),
          modifiedById: z.optional(z.uuid()),
          name: z.optional(z.union([z.string(), z.null()])),
          organizations: z.optional(
            z.array(
              z.object({
                createdAt: z.optional(z.iso.datetime()),
                domain: z.optional(z.string().min(1)),
                id: z.optional(z.uuid()),
                modifiedById: z.optional(z.uuid()),
                name: z.optional(z.string().min(1)),
                ownerId: z.optional(z.uuid()),
                updatedAt: z.optional(z.iso.datetime()),
              })
            )
          ),
          phone: z.optional(z.union([z.string(), z.null()])),
          primaryOrganizationId: z.optional(z.union([z.uuid(), z.null()])),
          roles: z.optional(
            z.array(
              z.object({
                createdAt: z.optional(z.iso.datetime()),
                description: z.optional(z.union([z.string(), z.null()])),
                id: z.optional(z.uuid()),
                modifiedById: z.optional(z.uuid()),
                name: z.optional(z.string().min(1)),
                permissions: z.optional(z.array(z.string())).default([]),
                updatedAt: z.optional(z.iso.datetime()),
              })
            )
          ),
          updatedAt: z.optional(z.iso.datetime()),
        })
      )
    )
  ),
  pageDetails: z.optional(
    z.union([
      z.object({
        count: z.optional(z.int().gte(0)),
        currentPage: z.optional(z.int().gte(1)),
        nextPage: z.optional(z.int().gte(2)),
        pages: z.optional(z.int().gte(0)),
        previousPage: z.optional(z.int().gte(1)),
      }),
      z.null(),
    ])
  ),
});

export const zPostApiAuthenticationLoginData = z.object({
  body: z.object({
    Email: z.optional(z.email()),
    Password: z.optional(z.string().min(6).max(100)),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiAuthenticationLogoutData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiAuthenticationMfaEnableData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiAuthenticationMfaVerifyData = z.object({
  body: z.object({
    code: z.optional(z.string()),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiUsersData = z.object({
  body: z.object({
    email: z.optional(z.email().min(1)),
    jobTitle: z.optional(z.union([z.string(), z.null()])),
    name: z.optional(z.union([z.string(), z.null()])),
    password: z.optional(z.string().min(8)),
    phone: z.optional(z.union([z.string(), z.null()])),
    roles: z.optional(z.array(z.uuid())),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});
