// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  DeleteApiOrganizationsByIdData,
  DeleteApiOrganizationsByIdErrors,
  DeleteApiOrganizationsByIdResponses,
  DeleteApiRolesByIdData,
  DeleteApiRolesByIdErrors,
  DeleteApiRolesByIdResponses,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdErrors,
  DeleteApiUsersByIdResponses,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationCheckErrors,
  GetApiAuthenticationCheckResponses,
  GetApiAuthenticationMfaEnableData,
  GetApiAuthenticationMfaEnableErrors,
  GetApiAuthenticationMfaEnableResponses,
  GetApiOrganizationsByIdData,
  GetApiOrganizationsByIdErrors,
  GetApiOrganizationsByIdResponses,
  GetApiOrganizationsData,
  GetApiOrganizationsErrors,
  GetApiOrganizationsResponses,
  GetApiRolesByIdData,
  GetApiRolesByIdErrors,
  GetApiRolesByIdResponses,
  GetApiRolesData,
  GetApiRolesErrors,
  GetApiRolesResponses,
  GetApiUsersByIdData,
  GetApiUsersByIdErrors,
  GetApiUsersByIdResponses,
  GetApiUsersData,
  GetApiUsersErrors,
  GetApiUsersResponses,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginErrors,
  PostApiAuthenticationLoginResponses,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutErrors,
  PostApiAuthenticationLogoutResponses,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyErrors,
  PostApiAuthenticationMfaVerifyResponses,
  PostApiOrganizationsData,
  PostApiOrganizationsErrors,
  PostApiOrganizationsResponses,
  PostApiRolesData,
  PostApiRolesErrors,
  PostApiRolesResponses,
  PostApiUsersData,
  PostApiUsersErrors,
  PostApiUsersResponses,
  PutApiOrganizationsByIdData,
  PutApiOrganizationsByIdErrors,
  PutApiOrganizationsByIdResponses,
  PutApiRolesByIdData,
  PutApiRolesByIdErrors,
  PutApiRolesByIdResponses,
  PutApiUsersByIdData,
  PutApiUsersByIdErrors,
  PutApiUsersByIdResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Check Authentication
 * Checks if the user is authenticated and returns their user information.
 */
export const getApiAuthenticationCheck = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthenticationCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthenticationCheckResponses,
    GetApiAuthenticationCheckErrors,
    ThrowOnError
  >({
    url: '/api/authentication/check',
    ...options,
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLogin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiAuthenticationLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthenticationLoginResponses,
    PostApiAuthenticationLoginErrors,
    ThrowOnError
  >({
    url: '/api/authentication/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogout = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiAuthenticationLogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthenticationLogoutResponses,
    PostApiAuthenticationLogoutErrors,
    ThrowOnError
  >({
    url: '/api/authentication/logout',
    ...options,
  });
};

/**
 * Enable Multi-Factor Authentication (MFA)
 * Generates a QR code for enabling Multi-Factor Authentication (MFA) for the user.
 */
export const getApiAuthenticationMfaEnable = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiAuthenticationMfaEnableData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthenticationMfaEnableResponses,
    GetApiAuthenticationMfaEnableErrors,
    ThrowOnError
  >({
    url: '/api/authentication/mfa/enable',
    ...options,
  });
};

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerify = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiAuthenticationMfaVerifyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthenticationMfaVerifyResponses,
    PostApiAuthenticationMfaVerifyErrors,
    ThrowOnError
  >({
    url: '/api/authentication/mfa/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * View Organizations
 * Endpoint to retrieve a list of organizations with pagination and optional search query
 */
export const getApiOrganizations = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiOrganizationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiOrganizationsResponses,
    GetApiOrganizationsErrors,
    ThrowOnError
  >({
    url: '/api/organizations',
    ...options,
  });
};

/**
 * Create Organization
 * Creates a new organization.
 */
export const postApiOrganizations = <ThrowOnError extends boolean = false>(
  options: Options<PostApiOrganizationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiOrganizationsResponses,
    PostApiOrganizationsErrors,
    ThrowOnError
  >({
    url: '/api/organizations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Organization by ID
 * Deletes a organization by by their id.
 */
export const deleteApiOrganizationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiOrganizationsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiOrganizationsByIdResponses,
    DeleteApiOrganizationsByIdErrors,
    ThrowOnError
  >({
    url: '/api/organizations/{id}',
    ...options,
  });
};

/**
 * View Organization
 * Endpoint to retrieve a organization by their ID
 */
export const getApiOrganizationsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiOrganizationsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiOrganizationsByIdResponses,
    GetApiOrganizationsByIdErrors,
    ThrowOnError
  >({
    url: '/api/organizations/{id}',
    ...options,
  });
};

/**
 * Update Organization by ID
 * Updates the organization information for a specific organization identified by their id.
 */
export const putApiOrganizationsById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiOrganizationsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiOrganizationsByIdResponses,
    PutApiOrganizationsByIdErrors,
    ThrowOnError
  >({
    url: '/api/organizations/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * View Roles
 * Endpoint to retrieve a list of roles with pagination and optional search query
 */
export const getApiRoles = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiRolesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiRolesResponses,
    GetApiRolesErrors,
    ThrowOnError
  >({
    url: '/api/roles',
    ...options,
  });
};

/**
 * Create Role
 * Creates a new role.
 */
export const postApiRoles = <ThrowOnError extends boolean = false>(
  options: Options<PostApiRolesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiRolesResponses,
    PostApiRolesErrors,
    ThrowOnError
  >({
    url: '/api/roles',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Role by ID
 * Deletes a role by by their id.
 */
export const deleteApiRolesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiRolesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiRolesByIdResponses,
    DeleteApiRolesByIdErrors,
    ThrowOnError
  >({
    url: '/api/roles/{id}',
    ...options,
  });
};

/**
 * View Role
 * Endpoint to retrieve a role by their ID
 */
export const getApiRolesById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiRolesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiRolesByIdResponses,
    GetApiRolesByIdErrors,
    ThrowOnError
  >({
    url: '/api/roles/{id}',
    ...options,
  });
};

/**
 * Update Role by ID
 * Updates the role information for a specific role identified by their id.
 */
export const putApiRolesById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiRolesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiRolesByIdResponses,
    PutApiRolesByIdErrors,
    ThrowOnError
  >({
    url: '/api/roles/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * View Users
 * Endpoint to retrieve a list of users with pagination and optional search query
 */
export const getApiUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersResponses,
    GetApiUsersErrors,
    ThrowOnError
  >({
    url: '/api/users',
    ...options,
  });
};

/**
 * Create User
 * Creates a new user.
 */
export const postApiUsers = <ThrowOnError extends boolean = false>(
  options: Options<PostApiUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUsersResponses,
    PostApiUsersErrors,
    ThrowOnError
  >({
    url: '/api/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete User by ID
 * Deletes a user by by their id.
 */
export const deleteApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiUsersByIdResponses,
    DeleteApiUsersByIdErrors,
    ThrowOnError
  >({
    url: '/api/users/{id}',
    ...options,
  });
};

/**
 * View User
 * Endpoint to retrieve a user by their ID
 */
export const getApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdResponses,
    GetApiUsersByIdErrors,
    ThrowOnError
  >({
    url: '/api/users/{id}',
    ...options,
  });
};

/**
 * Update User by ID
 * Updates the user information for a specific user identified by their id.
 */
export const putApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiUsersByIdResponses,
    PutApiUsersByIdErrors,
    ThrowOnError
  >({
    url: '/api/users/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
