// This file is auto-generated by @hey-api/openapi-ts
import {
  type InfiniteData,
  type UseMutationOptions,
  infiniteQueryOptions,
  queryOptions,
} from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  deleteApiOrganizationsById,
  deleteApiRolesById,
  deleteApiUsersById,
  getApiAuthenticationCheck,
  getApiAuthenticationMfaEnable,
  getApiOrganizations,
  getApiOrganizationsById,
  getApiRoles,
  getApiRolesById,
  getApiUsers,
  getApiUsersById,
  postApiAuthenticationLogin,
  postApiAuthenticationLogout,
  postApiAuthenticationMfaVerify,
  postApiOrganizations,
  postApiRoles,
  postApiUsers,
  putApiOrganizationsById,
  putApiRolesById,
  putApiUsersById,
} from '../sdk.gen';
import type {
  DeleteApiOrganizationsByIdData,
  DeleteApiOrganizationsByIdError,
  DeleteApiRolesByIdData,
  DeleteApiRolesByIdError,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdError,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationMfaEnableData,
  GetApiOrganizationsByIdData,
  GetApiOrganizationsData,
  GetApiOrganizationsError,
  GetApiOrganizationsResponse,
  GetApiRolesByIdData,
  GetApiRolesData,
  GetApiRolesError,
  GetApiRolesResponse,
  GetApiUsersByIdData,
  GetApiUsersData,
  GetApiUsersError,
  GetApiUsersResponse,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutError,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyError,
  PostApiOrganizationsData,
  PostApiOrganizationsError,
  PostApiRolesData,
  PostApiRolesError,
  PostApiUsersData,
  PostApiUsersError,
  PutApiOrganizationsByIdData,
  PutApiOrganizationsByIdError,
  PutApiRolesByIdData,
  PutApiRolesByIdError,
  PutApiUsersByIdData,
  PutApiUsersByIdError,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiAuthenticationCheckQueryKey = (
  options?: Options<GetApiAuthenticationCheckData>
) => createQueryKey('getApiAuthenticationCheck', options);

/**
 * Check Authentication
 * Checks if the user is authenticated and returns their user information.
 */
export const getApiAuthenticationCheckOptions = (
  options?: Options<GetApiAuthenticationCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationCheckQueryKey(options),
  });
};

export const postApiAuthenticationLoginQueryKey = (
  options: Options<PostApiAuthenticationLoginData>
) => createQueryKey('postApiAuthenticationLogin', options);

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginOptions = (
  options: Options<PostApiAuthenticationLoginData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLoginQueryKey(options),
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginMutation = (
  options?: Partial<Options<PostApiAuthenticationLoginData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationLoginError,
  Options<PostApiAuthenticationLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationLoginError,
    Options<PostApiAuthenticationLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationLogoutQueryKey = (
  options?: Options<PostApiAuthenticationLogoutData>
) => createQueryKey('postApiAuthenticationLogout', options);

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogoutOptions = (
  options?: Options<PostApiAuthenticationLogoutData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLogoutQueryKey(options),
  });
};

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogoutMutation = (
  options?: Partial<Options<PostApiAuthenticationLogoutData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationLogoutError,
  Options<PostApiAuthenticationLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationLogoutError,
    Options<PostApiAuthenticationLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationMfaEnableQueryKey = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => createQueryKey('getApiAuthenticationMfaEnable', options);

/**
 * Enable Multi-Factor Authentication (MFA)
 * Generates a QR code for enabling Multi-Factor Authentication (MFA) for the user.
 */
export const getApiAuthenticationMfaEnableOptions = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationMfaEnable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationMfaEnableQueryKey(options),
  });
};

export const postApiAuthenticationMfaVerifyQueryKey = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => createQueryKey('postApiAuthenticationMfaVerify', options);

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyOptions = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMfaVerifyQueryKey(options),
  });
};

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyMutation = (
  options?: Partial<Options<PostApiAuthenticationMfaVerifyData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationMfaVerifyError,
  Options<PostApiAuthenticationMfaVerifyData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationMfaVerifyError,
    Options<PostApiAuthenticationMfaVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiOrganizationsQueryKey = (
  options?: Options<GetApiOrganizationsData>
) => createQueryKey('getApiOrganizations', options);

/**
 * View Organizations
 * Endpoint to retrieve a list of organizations with pagination and optional search query
 */
export const getApiOrganizationsOptions = (
  options?: Options<GetApiOrganizationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOrganizations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiOrganizationsQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  };
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getApiOrganizationsInfiniteQueryKey = (
  options?: Options<GetApiOrganizationsData>
): QueryKey<Options<GetApiOrganizationsData>> =>
  createQueryKey('getApiOrganizations', options, true);

/**
 * View Organizations
 * Endpoint to retrieve a list of organizations with pagination and optional search query
 */
export const getApiOrganizationsInfiniteOptions = (
  options?: Options<GetApiOrganizationsData>
) => {
  return infiniteQueryOptions<
    GetApiOrganizationsResponse,
    GetApiOrganizationsError,
    InfiniteData<GetApiOrganizationsResponse>,
    QueryKey<Options<GetApiOrganizationsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiOrganizationsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiOrganizationsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiOrganizations({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiOrganizationsInfiniteQueryKey(options),
    }
  );
};

export const postApiOrganizationsQueryKey = (
  options: Options<PostApiOrganizationsData>
) => createQueryKey('postApiOrganizations', options);

/**
 * Create Organization
 * Creates a new organization.
 */
export const postApiOrganizationsOptions = (
  options: Options<PostApiOrganizationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiOrganizations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiOrganizationsQueryKey(options),
  });
};

/**
 * Create Organization
 * Creates a new organization.
 */
export const postApiOrganizationsMutation = (
  options?: Partial<Options<PostApiOrganizationsData>>
): UseMutationOptions<
  unknown,
  PostApiOrganizationsError,
  Options<PostApiOrganizationsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiOrganizationsError,
    Options<PostApiOrganizationsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiOrganizations({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Organization by ID
 * Deletes a organization by by their id.
 */
export const deleteApiOrganizationsByIdMutation = (
  options?: Partial<Options<DeleteApiOrganizationsByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiOrganizationsByIdError,
  Options<DeleteApiOrganizationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiOrganizationsByIdError,
    Options<DeleteApiOrganizationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiOrganizationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiOrganizationsByIdQueryKey = (
  options: Options<GetApiOrganizationsByIdData>
) => createQueryKey('getApiOrganizationsById', options);

/**
 * View Organization
 * Endpoint to retrieve a organization by their ID
 */
export const getApiOrganizationsByIdOptions = (
  options: Options<GetApiOrganizationsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOrganizationsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiOrganizationsByIdQueryKey(options),
  });
};

/**
 * Update Organization by ID
 * Updates the organization information for a specific organization identified by their id.
 */
export const putApiOrganizationsByIdMutation = (
  options?: Partial<Options<PutApiOrganizationsByIdData>>
): UseMutationOptions<
  unknown,
  PutApiOrganizationsByIdError,
  Options<PutApiOrganizationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiOrganizationsByIdError,
    Options<PutApiOrganizationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiOrganizationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesQueryKey = (options?: Options<GetApiRolesData>) =>
  createQueryKey('getApiRoles', options);

/**
 * View Roles
 * Endpoint to retrieve a list of roles with pagination and optional search query
 */
export const getApiRolesOptions = (options?: Options<GetApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesQueryKey(options),
  });
};

export const getApiRolesInfiniteQueryKey = (
  options?: Options<GetApiRolesData>
): QueryKey<Options<GetApiRolesData>> =>
  createQueryKey('getApiRoles', options, true);

/**
 * View Roles
 * Endpoint to retrieve a list of roles with pagination and optional search query
 */
export const getApiRolesInfiniteOptions = (
  options?: Options<GetApiRolesData>
) => {
  return infiniteQueryOptions<
    GetApiRolesResponse,
    GetApiRolesError,
    InfiniteData<GetApiRolesResponse>,
    QueryKey<Options<GetApiRolesData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiRolesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiRolesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiRoles({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiRolesInfiniteQueryKey(options),
    }
  );
};

export const postApiRolesQueryKey = (options: Options<PostApiRolesData>) =>
  createQueryKey('postApiRoles', options);

/**
 * Create Role
 * Creates a new role.
 */
export const postApiRolesOptions = (options: Options<PostApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiRolesQueryKey(options),
  });
};

/**
 * Create Role
 * Creates a new role.
 */
export const postApiRolesMutation = (
  options?: Partial<Options<PostApiRolesData>>
): UseMutationOptions<
  unknown,
  PostApiRolesError,
  Options<PostApiRolesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiRolesError,
    Options<PostApiRolesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiRoles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Role by ID
 * Deletes a role by by their id.
 */
export const deleteApiRolesByIdMutation = (
  options?: Partial<Options<DeleteApiRolesByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiRolesByIdError,
  Options<DeleteApiRolesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiRolesByIdError,
    Options<DeleteApiRolesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiRolesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesByIdQueryKey = (
  options: Options<GetApiRolesByIdData>
) => createQueryKey('getApiRolesById', options);

/**
 * View Role
 * Endpoint to retrieve a role by their ID
 */
export const getApiRolesByIdOptions = (
  options: Options<GetApiRolesByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRolesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesByIdQueryKey(options),
  });
};

/**
 * Update Role by ID
 * Updates the role information for a specific role identified by their id.
 */
export const putApiRolesByIdMutation = (
  options?: Partial<Options<PutApiRolesByIdData>>
): UseMutationOptions<
  unknown,
  PutApiRolesByIdError,
  Options<PutApiRolesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiRolesByIdError,
    Options<PutApiRolesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiRolesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersQueryKey = (options?: Options<GetApiUsersData>) =>
  createQueryKey('getApiUsers', options);

/**
 * View Users
 * Endpoint to retrieve a list of users with pagination and optional search query
 */
export const getApiUsersOptions = (options?: Options<GetApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersQueryKey(options),
  });
};

export const getApiUsersInfiniteQueryKey = (
  options?: Options<GetApiUsersData>
): QueryKey<Options<GetApiUsersData>> =>
  createQueryKey('getApiUsers', options, true);

/**
 * View Users
 * Endpoint to retrieve a list of users with pagination and optional search query
 */
export const getApiUsersInfiniteOptions = (
  options?: Options<GetApiUsersData>
) => {
  return infiniteQueryOptions<
    GetApiUsersResponse,
    GetApiUsersError,
    InfiniteData<GetApiUsersResponse>,
    QueryKey<Options<GetApiUsersData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiUsersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiUsersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiUsersInfiniteQueryKey(options),
    }
  );
};

export const postApiUsersQueryKey = (options: Options<PostApiUsersData>) =>
  createQueryKey('postApiUsers', options);

/**
 * Create User
 * Creates a new user.
 */
export const postApiUsersOptions = (options: Options<PostApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersQueryKey(options),
  });
};

/**
 * Create User
 * Creates a new user.
 */
export const postApiUsersMutation = (
  options?: Partial<Options<PostApiUsersData>>
): UseMutationOptions<
  unknown,
  PostApiUsersError,
  Options<PostApiUsersData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiUsersError,
    Options<PostApiUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User by ID
 * Deletes a user by by their id.
 */
export const deleteApiUsersByIdMutation = (
  options?: Partial<Options<DeleteApiUsersByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiUsersByIdError,
  Options<DeleteApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiUsersByIdError,
    Options<DeleteApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersByIdQueryKey = (
  options: Options<GetApiUsersByIdData>
) => createQueryKey('getApiUsersById', options);

/**
 * View User
 * Endpoint to retrieve a user by their ID
 */
export const getApiUsersByIdOptions = (
  options: Options<GetApiUsersByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsersById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersByIdQueryKey(options),
  });
};

/**
 * Update User by ID
 * Updates the user information for a specific user identified by their id.
 */
export const putApiUsersByIdMutation = (
  options?: Partial<Options<PutApiUsersByIdData>>
): UseMutationOptions<
  unknown,
  PutApiUsersByIdError,
  Options<PutApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiUsersByIdError,
    Options<PutApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
