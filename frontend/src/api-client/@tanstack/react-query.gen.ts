// This file is auto-generated by @hey-api/openapi-ts
import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  getApiAuthenticationCheck,
  getApiAuthenticationLogout,
  getApiAuthenticationMfaEnable,
  postApiAuthenticationLogin,
  postApiAuthenticationMfaVerify,
  postApiUsers,
} from '../sdk.gen';
import type {
  GetApiAuthenticationCheckData,
  GetApiAuthenticationLogoutData,
  GetApiAuthenticationMfaEnableData,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyError,
  PostApiUsersData,
  PostApiUsersError,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiAuthenticationCheckQueryKey = (
  options?: Options<GetApiAuthenticationCheckData>
) => createQueryKey('getApiAuthenticationCheck', options);

/**
 * Check Authentication
 * Checks if the user is authenticated and returns their user information.
 */
export const getApiAuthenticationCheckOptions = (
  options?: Options<GetApiAuthenticationCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationCheckQueryKey(options),
  });
};

export const postApiAuthenticationLoginQueryKey = (
  options: Options<PostApiAuthenticationLoginData>
) => createQueryKey('postApiAuthenticationLogin', options);

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginOptions = (
  options: Options<PostApiAuthenticationLoginData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLoginQueryKey(options),
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginMutation = (
  options?: Partial<Options<PostApiAuthenticationLoginData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationLoginError,
  Options<PostApiAuthenticationLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationLoginError,
    Options<PostApiAuthenticationLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationLogoutQueryKey = (
  options?: Options<GetApiAuthenticationLogoutData>
) => createQueryKey('getApiAuthenticationLogout', options);

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const getApiAuthenticationLogoutOptions = (
  options?: Options<GetApiAuthenticationLogoutData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationLogoutQueryKey(options),
  });
};

export const getApiAuthenticationMfaEnableQueryKey = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => createQueryKey('getApiAuthenticationMfaEnable', options);

/**
 * Enable Multi-Factor Authentication (MFA)
 * Generates a QR code for enabling Multi-Factor Authentication (MFA) for the user.
 */
export const getApiAuthenticationMfaEnableOptions = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationMfaEnable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationMfaEnableQueryKey(options),
  });
};

export const postApiAuthenticationMfaVerifyQueryKey = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => createQueryKey('postApiAuthenticationMfaVerify', options);

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyOptions = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMfaVerifyQueryKey(options),
  });
};

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyMutation = (
  options?: Partial<Options<PostApiAuthenticationMfaVerifyData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationMfaVerifyError,
  Options<PostApiAuthenticationMfaVerifyData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationMfaVerifyError,
    Options<PostApiAuthenticationMfaVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUsersQueryKey = (options: Options<PostApiUsersData>) =>
  createQueryKey('postApiUsers', options);

/**
 * Create User
 * Creates a new user.
 */
export const postApiUsersOptions = (options: Options<PostApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersQueryKey(options),
  });
};

/**
 * Create User
 * Creates a new user.
 */
export const postApiUsersMutation = (
  options?: Partial<Options<PostApiUsersData>>
): UseMutationOptions<
  unknown,
  PostApiUsersError,
  Options<PostApiUsersData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiUsersError,
    Options<PostApiUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
