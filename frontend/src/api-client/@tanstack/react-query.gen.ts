// This file is auto-generated by @hey-api/openapi-ts
import {
  type InfiniteData,
  type UseMutationOptions,
  infiniteQueryOptions,
  queryOptions,
} from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  deleteApiBusinessesById,
  deleteApiCollectionsById,
  deleteApiCollectionsMaterialsById,
  deleteApiMaterialsById,
  deleteApiRolesById,
  deleteApiTransactionsById,
  deleteApiTransactionsMaterialsById,
  deleteApiUsersById,
  getApiAuthenticationCheck,
  getApiAuthenticationMfaEnable,
  getApiAuthenticationPermissions,
  getApiBusinesses,
  getApiBusinessesById,
  getApiBusinessesListUsersByBusinessId,
  getApiCollections,
  getApiCollectionsById,
  getApiCollectionsListMaterialsByCollectionId,
  getApiCollectionsMaterials,
  getApiCollectionsMaterialsById,
  getApiMaterials,
  getApiMaterialsById,
  getApiRoles,
  getApiRolesById,
  getApiTransactions,
  getApiTransactionsById,
  getApiTransactionsListMaterialsByTransactionId,
  getApiTransactionsMaterials,
  getApiTransactionsMaterialsById,
  getApiUsers,
  getApiUsersById,
  getApiUsersListRolesByUserId,
  postApiAuthenticationLogin,
  postApiAuthenticationLogout,
  postApiAuthenticationMfaVerify,
  postApiAuthenticationRegister,
  postApiBusinesses,
  postApiBusinessesAssignUserByBusinessIdByUserId,
  postApiBusinessesUnassignUserByBusinessIdByUserId,
  postApiCollections,
  postApiCollectionsAssignMaterialByCollectionIdByMaterialId,
  postApiCollectionsMaterials,
  postApiCollectionsUnassignMaterialByCollectionIdByMaterialId,
  postApiMaterials,
  postApiRoles,
  postApiTransactions,
  postApiTransactionsAssignMaterialByTransactionIdByMaterialId,
  postApiTransactionsMaterials,
  postApiTransactionsUnassignMaterialByTransactionIdByMaterialId,
  postApiUsers,
  postApiUsersAssignRoleByUserIdByRoleId,
  postApiUsersUnassignRoleByUserIdByRoleId,
  putApiBusinessesById,
  putApiCollectionsById,
  putApiCollectionsMaterialsById,
  putApiMaterialsById,
  putApiRolesById,
  putApiTransactionsById,
  putApiTransactionsMaterialsById,
  putApiUsersById,
} from '../sdk.gen';
import type {
  DeleteApiBusinessesByIdData,
  DeleteApiBusinessesByIdError,
  DeleteApiBusinessesByIdResponse,
  DeleteApiCollectionsByIdData,
  DeleteApiCollectionsByIdError,
  DeleteApiCollectionsByIdResponse,
  DeleteApiCollectionsMaterialsByIdData,
  DeleteApiCollectionsMaterialsByIdError,
  DeleteApiCollectionsMaterialsByIdResponse,
  DeleteApiMaterialsByIdData,
  DeleteApiMaterialsByIdError,
  DeleteApiMaterialsByIdResponse,
  DeleteApiRolesByIdData,
  DeleteApiRolesByIdError,
  DeleteApiRolesByIdResponse,
  DeleteApiTransactionsByIdData,
  DeleteApiTransactionsByIdError,
  DeleteApiTransactionsByIdResponse,
  DeleteApiTransactionsMaterialsByIdData,
  DeleteApiTransactionsMaterialsByIdError,
  DeleteApiTransactionsMaterialsByIdResponse,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdError,
  DeleteApiUsersByIdResponse,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationMfaEnableData,
  GetApiAuthenticationPermissionsData,
  GetApiBusinessesByIdData,
  GetApiBusinessesData,
  GetApiBusinessesError,
  GetApiBusinessesListUsersByBusinessIdData,
  GetApiBusinessesListUsersByBusinessIdError,
  GetApiBusinessesListUsersByBusinessIdResponse,
  GetApiBusinessesResponse,
  GetApiCollectionsByIdData,
  GetApiCollectionsData,
  GetApiCollectionsError,
  GetApiCollectionsListMaterialsByCollectionIdData,
  GetApiCollectionsListMaterialsByCollectionIdError,
  GetApiCollectionsListMaterialsByCollectionIdResponse,
  GetApiCollectionsMaterialsByIdData,
  GetApiCollectionsMaterialsData,
  GetApiCollectionsMaterialsError,
  GetApiCollectionsMaterialsResponse,
  GetApiCollectionsResponse,
  GetApiMaterialsByIdData,
  GetApiMaterialsData,
  GetApiMaterialsError,
  GetApiMaterialsResponse,
  GetApiRolesByIdData,
  GetApiRolesData,
  GetApiRolesError,
  GetApiRolesResponse,
  GetApiTransactionsByIdData,
  GetApiTransactionsData,
  GetApiTransactionsError,
  GetApiTransactionsListMaterialsByTransactionIdData,
  GetApiTransactionsListMaterialsByTransactionIdError,
  GetApiTransactionsListMaterialsByTransactionIdResponse,
  GetApiTransactionsMaterialsByIdData,
  GetApiTransactionsMaterialsData,
  GetApiTransactionsMaterialsError,
  GetApiTransactionsMaterialsResponse,
  GetApiTransactionsResponse,
  GetApiUsersByIdData,
  GetApiUsersData,
  GetApiUsersError,
  GetApiUsersListRolesByUserIdData,
  GetApiUsersListRolesByUserIdError,
  GetApiUsersListRolesByUserIdResponse,
  GetApiUsersResponse,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutError,
  PostApiAuthenticationLogoutResponse,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyError,
  PostApiAuthenticationMfaVerifyResponse,
  PostApiAuthenticationRegisterData,
  PostApiAuthenticationRegisterError,
  PostApiAuthenticationRegisterResponse,
  PostApiBusinessesAssignUserByBusinessIdByUserIdData,
  PostApiBusinessesAssignUserByBusinessIdByUserIdError,
  PostApiBusinessesAssignUserByBusinessIdByUserIdResponse,
  PostApiBusinessesData,
  PostApiBusinessesError,
  PostApiBusinessesResponse,
  PostApiBusinessesUnassignUserByBusinessIdByUserIdData,
  PostApiBusinessesUnassignUserByBusinessIdByUserIdError,
  PostApiBusinessesUnassignUserByBusinessIdByUserIdResponse,
  PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdData,
  PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdError,
  PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdResponse,
  PostApiCollectionsData,
  PostApiCollectionsError,
  PostApiCollectionsMaterialsData,
  PostApiCollectionsMaterialsError,
  PostApiCollectionsMaterialsResponse,
  PostApiCollectionsResponse,
  PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdData,
  PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdError,
  PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdResponse,
  PostApiMaterialsData,
  PostApiMaterialsError,
  PostApiMaterialsResponse,
  PostApiRolesData,
  PostApiRolesError,
  PostApiRolesResponse,
  PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdData,
  PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdError,
  PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdResponse,
  PostApiTransactionsData,
  PostApiTransactionsError,
  PostApiTransactionsMaterialsData,
  PostApiTransactionsMaterialsError,
  PostApiTransactionsMaterialsResponse,
  PostApiTransactionsResponse,
  PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdData,
  PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdError,
  PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdResponse,
  PostApiUsersAssignRoleByUserIdByRoleIdData,
  PostApiUsersAssignRoleByUserIdByRoleIdError,
  PostApiUsersAssignRoleByUserIdByRoleIdResponse,
  PostApiUsersData,
  PostApiUsersError,
  PostApiUsersResponse,
  PostApiUsersUnassignRoleByUserIdByRoleIdData,
  PostApiUsersUnassignRoleByUserIdByRoleIdError,
  PostApiUsersUnassignRoleByUserIdByRoleIdResponse,
  PutApiBusinessesByIdData,
  PutApiBusinessesByIdError,
  PutApiBusinessesByIdResponse,
  PutApiCollectionsByIdData,
  PutApiCollectionsByIdError,
  PutApiCollectionsByIdResponse,
  PutApiCollectionsMaterialsByIdData,
  PutApiCollectionsMaterialsByIdError,
  PutApiCollectionsMaterialsByIdResponse,
  PutApiMaterialsByIdData,
  PutApiMaterialsByIdError,
  PutApiMaterialsByIdResponse,
  PutApiRolesByIdData,
  PutApiRolesByIdError,
  PutApiRolesByIdResponse,
  PutApiTransactionsByIdData,
  PutApiTransactionsByIdError,
  PutApiTransactionsByIdResponse,
  PutApiTransactionsMaterialsByIdData,
  PutApiTransactionsMaterialsByIdError,
  PutApiTransactionsMaterialsByIdResponse,
  PutApiUsersByIdData,
  PutApiUsersByIdError,
  PutApiUsersByIdResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiAuthenticationCheckQueryKey = (
  options?: Options<GetApiAuthenticationCheckData>
) => createQueryKey('getApiAuthenticationCheck', options);

/**
 * Check Authentication
 * Checks if the user is authenticated.
 */
export const getApiAuthenticationCheckOptions = (
  options?: Options<GetApiAuthenticationCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationCheckQueryKey(options),
  });
};

export const postApiAuthenticationLoginQueryKey = (
  options: Options<PostApiAuthenticationLoginData>
) => createQueryKey('postApiAuthenticationLogin', options);

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginOptions = (
  options: Options<PostApiAuthenticationLoginData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLoginQueryKey(options),
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginMutation = (
  options?: Partial<Options<PostApiAuthenticationLoginData>>
): UseMutationOptions<
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationLoginError,
  Options<PostApiAuthenticationLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationLoginResponse,
    PostApiAuthenticationLoginError,
    Options<PostApiAuthenticationLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationLogoutQueryKey = (
  options?: Options<PostApiAuthenticationLogoutData>
) => createQueryKey('postApiAuthenticationLogout', options);

/**
 * Logout
 * Logs out the user.
 */
export const postApiAuthenticationLogoutOptions = (
  options?: Options<PostApiAuthenticationLogoutData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLogoutQueryKey(options),
  });
};

/**
 * Logout
 * Logs out the user.
 */
export const postApiAuthenticationLogoutMutation = (
  options?: Partial<Options<PostApiAuthenticationLogoutData>>
): UseMutationOptions<
  PostApiAuthenticationLogoutResponse,
  PostApiAuthenticationLogoutError,
  Options<PostApiAuthenticationLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationLogoutResponse,
    PostApiAuthenticationLogoutError,
    Options<PostApiAuthenticationLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationMfaEnableQueryKey = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => createQueryKey('getApiAuthenticationMfaEnable', options);

/**
 * Enable MFA
 * Enables Multi-Factor Authentication for the user.
 */
export const getApiAuthenticationMfaEnableOptions = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationMfaEnable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationMfaEnableQueryKey(options),
  });
};

export const postApiAuthenticationMfaVerifyQueryKey = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => createQueryKey('postApiAuthenticationMfaVerify', options);

/**
 * Verify MFA
 * Verifies the Multi-Factor Authentication code for the user.
 */
export const postApiAuthenticationMfaVerifyOptions = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMfaVerifyQueryKey(options),
  });
};

/**
 * Verify MFA
 * Verifies the Multi-Factor Authentication code for the user.
 */
export const postApiAuthenticationMfaVerifyMutation = (
  options?: Partial<Options<PostApiAuthenticationMfaVerifyData>>
): UseMutationOptions<
  PostApiAuthenticationMfaVerifyResponse,
  PostApiAuthenticationMfaVerifyError,
  Options<PostApiAuthenticationMfaVerifyData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationMfaVerifyResponse,
    PostApiAuthenticationMfaVerifyError,
    Options<PostApiAuthenticationMfaVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationPermissionsQueryKey = (
  options?: Options<GetApiAuthenticationPermissionsData>
) => createQueryKey('getApiAuthenticationPermissions', options);

/**
 * Permissions
 * Retrieves the permissions available in the system.
 */
export const getApiAuthenticationPermissionsOptions = (
  options?: Options<GetApiAuthenticationPermissionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationPermissions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationPermissionsQueryKey(options),
  });
};

export const postApiAuthenticationRegisterQueryKey = (
  options: Options<PostApiAuthenticationRegisterData>
) => createQueryKey('postApiAuthenticationRegister', options);

/**
 * Register
 * Registers a new user with email and password.
 */
export const postApiAuthenticationRegisterOptions = (
  options: Options<PostApiAuthenticationRegisterData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationRegisterQueryKey(options),
  });
};

/**
 * Register
 * Registers a new user with email and password.
 */
export const postApiAuthenticationRegisterMutation = (
  options?: Partial<Options<PostApiAuthenticationRegisterData>>
): UseMutationOptions<
  PostApiAuthenticationRegisterResponse,
  PostApiAuthenticationRegisterError,
  Options<PostApiAuthenticationRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationRegisterResponse,
    PostApiAuthenticationRegisterError,
    Options<PostApiAuthenticationRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiBusinessesQueryKey = (
  options: Options<GetApiBusinessesData>
) => createQueryKey('getApiBusinesses', options);

/**
 * Get Businesses
 * This endpoint retrieves a list of business.
 */
export const getApiBusinessesOptions = (
  options: Options<GetApiBusinessesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBusinesses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBusinessesQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  };
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getApiBusinessesInfiniteQueryKey = (
  options: Options<GetApiBusinessesData>
): QueryKey<Options<GetApiBusinessesData>> =>
  createQueryKey('getApiBusinesses', options, true);

/**
 * Get Businesses
 * This endpoint retrieves a list of business.
 */
export const getApiBusinessesInfiniteOptions = (
  options: Options<GetApiBusinessesData>
) => {
  return infiniteQueryOptions<
    GetApiBusinessesResponse,
    GetApiBusinessesError,
    InfiniteData<GetApiBusinessesResponse>,
    QueryKey<Options<GetApiBusinessesData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiBusinessesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiBusinessesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiBusinesses({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiBusinessesInfiniteQueryKey(options),
    }
  );
};

export const postApiBusinessesQueryKey = (
  options: Options<PostApiBusinessesData>
) => createQueryKey('postApiBusinesses', options);

/**
 * Create Business
 * This endpoint creates a new business.
 */
export const postApiBusinessesOptions = (
  options: Options<PostApiBusinessesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiBusinesses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiBusinessesQueryKey(options),
  });
};

/**
 * Create Business
 * This endpoint creates a new business.
 */
export const postApiBusinessesMutation = (
  options?: Partial<Options<PostApiBusinessesData>>
): UseMutationOptions<
  PostApiBusinessesResponse,
  PostApiBusinessesError,
  Options<PostApiBusinessesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiBusinessesResponse,
    PostApiBusinessesError,
    Options<PostApiBusinessesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiBusinesses({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiBusinessesAssignUserByBusinessIdByUserIdQueryKey = (
  options: Options<PostApiBusinessesAssignUserByBusinessIdByUserIdData>
) => createQueryKey('postApiBusinessesAssignUserByBusinessIdByUserId', options);

/**
 * Assign User
 * This endpoint assigns a user to a business
 */
export const postApiBusinessesAssignUserByBusinessIdByUserIdOptions = (
  options: Options<PostApiBusinessesAssignUserByBusinessIdByUserIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiBusinessesAssignUserByBusinessIdByUserId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiBusinessesAssignUserByBusinessIdByUserIdQueryKey(options),
  });
};

/**
 * Assign User
 * This endpoint assigns a user to a business
 */
export const postApiBusinessesAssignUserByBusinessIdByUserIdMutation = (
  options?: Partial<
    Options<PostApiBusinessesAssignUserByBusinessIdByUserIdData>
  >
): UseMutationOptions<
  PostApiBusinessesAssignUserByBusinessIdByUserIdResponse,
  PostApiBusinessesAssignUserByBusinessIdByUserIdError,
  Options<PostApiBusinessesAssignUserByBusinessIdByUserIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiBusinessesAssignUserByBusinessIdByUserIdResponse,
    PostApiBusinessesAssignUserByBusinessIdByUserIdError,
    Options<PostApiBusinessesAssignUserByBusinessIdByUserIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiBusinessesAssignUserByBusinessIdByUserId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiBusinessesListUsersByBusinessIdQueryKey = (
  options: Options<GetApiBusinessesListUsersByBusinessIdData>
) => createQueryKey('getApiBusinessesListUsersByBusinessId', options);

/**
 * List User
 * This endpoint retrieves a list of user assigned to a business
 */
export const getApiBusinessesListUsersByBusinessIdOptions = (
  options: Options<GetApiBusinessesListUsersByBusinessIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBusinessesListUsersByBusinessId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBusinessesListUsersByBusinessIdQueryKey(options),
  });
};

export const getApiBusinessesListUsersByBusinessIdInfiniteQueryKey = (
  options: Options<GetApiBusinessesListUsersByBusinessIdData>
): QueryKey<Options<GetApiBusinessesListUsersByBusinessIdData>> =>
  createQueryKey('getApiBusinessesListUsersByBusinessId', options, true);

/**
 * List User
 * This endpoint retrieves a list of user assigned to a business
 */
export const getApiBusinessesListUsersByBusinessIdInfiniteOptions = (
  options: Options<GetApiBusinessesListUsersByBusinessIdData>
) => {
  return infiniteQueryOptions<
    GetApiBusinessesListUsersByBusinessIdResponse,
    GetApiBusinessesListUsersByBusinessIdError,
    InfiniteData<GetApiBusinessesListUsersByBusinessIdResponse>,
    QueryKey<Options<GetApiBusinessesListUsersByBusinessIdData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiBusinessesListUsersByBusinessIdData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiBusinessesListUsersByBusinessIdData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiBusinessesListUsersByBusinessId({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiBusinessesListUsersByBusinessIdInfiniteQueryKey(options),
    }
  );
};

export const postApiBusinessesUnassignUserByBusinessIdByUserIdQueryKey = (
  options: Options<PostApiBusinessesUnassignUserByBusinessIdByUserIdData>
) =>
  createQueryKey('postApiBusinessesUnassignUserByBusinessIdByUserId', options);

/**
 * Unassign User
 * This endpoint unassigns a user from a business
 */
export const postApiBusinessesUnassignUserByBusinessIdByUserIdOptions = (
  options: Options<PostApiBusinessesUnassignUserByBusinessIdByUserIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiBusinessesUnassignUserByBusinessIdByUserId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey:
      postApiBusinessesUnassignUserByBusinessIdByUserIdQueryKey(options),
  });
};

/**
 * Unassign User
 * This endpoint unassigns a user from a business
 */
export const postApiBusinessesUnassignUserByBusinessIdByUserIdMutation = (
  options?: Partial<
    Options<PostApiBusinessesUnassignUserByBusinessIdByUserIdData>
  >
): UseMutationOptions<
  PostApiBusinessesUnassignUserByBusinessIdByUserIdResponse,
  PostApiBusinessesUnassignUserByBusinessIdByUserIdError,
  Options<PostApiBusinessesUnassignUserByBusinessIdByUserIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiBusinessesUnassignUserByBusinessIdByUserIdResponse,
    PostApiBusinessesUnassignUserByBusinessIdByUserIdError,
    Options<PostApiBusinessesUnassignUserByBusinessIdByUserIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiBusinessesUnassignUserByBusinessIdByUserId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Business
 * This endpoint deletes an existing business.
 */
export const deleteApiBusinessesByIdMutation = (
  options?: Partial<Options<DeleteApiBusinessesByIdData>>
): UseMutationOptions<
  DeleteApiBusinessesByIdResponse,
  DeleteApiBusinessesByIdError,
  Options<DeleteApiBusinessesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiBusinessesByIdResponse,
    DeleteApiBusinessesByIdError,
    Options<DeleteApiBusinessesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiBusinessesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiBusinessesByIdQueryKey = (
  options: Options<GetApiBusinessesByIdData>
) => createQueryKey('getApiBusinessesById', options);

/**
 * Get Business
 * This endpoint retrieves an existing business.
 */
export const getApiBusinessesByIdOptions = (
  options: Options<GetApiBusinessesByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBusinessesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBusinessesByIdQueryKey(options),
  });
};

/**
 * Update Business
 * This endpoint updates an existing business.
 */
export const putApiBusinessesByIdMutation = (
  options?: Partial<Options<PutApiBusinessesByIdData>>
): UseMutationOptions<
  PutApiBusinessesByIdResponse,
  PutApiBusinessesByIdError,
  Options<PutApiBusinessesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiBusinessesByIdResponse,
    PutApiBusinessesByIdError,
    Options<PutApiBusinessesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiBusinessesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectionsQueryKey = (
  options: Options<GetApiCollectionsData>
) => createQueryKey('getApiCollections', options);

/**
 * Get Collections
 * This endpoint retrieves a list of collection.
 */
export const getApiCollectionsOptions = (
  options: Options<GetApiCollectionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollections({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsQueryKey(options),
  });
};

export const getApiCollectionsInfiniteQueryKey = (
  options: Options<GetApiCollectionsData>
): QueryKey<Options<GetApiCollectionsData>> =>
  createQueryKey('getApiCollections', options, true);

/**
 * Get Collections
 * This endpoint retrieves a list of collection.
 */
export const getApiCollectionsInfiniteOptions = (
  options: Options<GetApiCollectionsData>
) => {
  return infiniteQueryOptions<
    GetApiCollectionsResponse,
    GetApiCollectionsError,
    InfiniteData<GetApiCollectionsResponse>,
    QueryKey<Options<GetApiCollectionsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiCollectionsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiCollectionsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiCollections({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiCollectionsInfiniteQueryKey(options),
    }
  );
};

export const postApiCollectionsQueryKey = (
  options: Options<PostApiCollectionsData>
) => createQueryKey('postApiCollections', options);

/**
 * Create Collection
 * This endpoint creates a new collection.
 */
export const postApiCollectionsOptions = (
  options: Options<PostApiCollectionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiCollections({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiCollectionsQueryKey(options),
  });
};

/**
 * Create Collection
 * This endpoint creates a new collection.
 */
export const postApiCollectionsMutation = (
  options?: Partial<Options<PostApiCollectionsData>>
): UseMutationOptions<
  PostApiCollectionsResponse,
  PostApiCollectionsError,
  Options<PostApiCollectionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiCollectionsResponse,
    PostApiCollectionsError,
    Options<PostApiCollectionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiCollections({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiCollectionsAssignMaterialByCollectionIdByMaterialIdQueryKey =
  (
    options: Options<PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdData>
  ) =>
    createQueryKey(
      'postApiCollectionsAssignMaterialByCollectionIdByMaterialId',
      options
    );

/**
 * Assign Material
 * This endpoint assigns a material to a collection
 */
export const postApiCollectionsAssignMaterialByCollectionIdByMaterialIdOptions =
  (
    options: Options<PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await postApiCollectionsAssignMaterialByCollectionIdByMaterialId({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        postApiCollectionsAssignMaterialByCollectionIdByMaterialIdQueryKey(
          options
        ),
    });
  };

/**
 * Assign Material
 * This endpoint assigns a material to a collection
 */
export const postApiCollectionsAssignMaterialByCollectionIdByMaterialIdMutation =
  (
    options?: Partial<
      Options<PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdData>
    >
  ): UseMutationOptions<
    PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdResponse,
    PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdError,
    Options<PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdData>
  > => {
    const mutationOptions: UseMutationOptions<
      PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdResponse,
      PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdError,
      Options<PostApiCollectionsAssignMaterialByCollectionIdByMaterialIdData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await postApiCollectionsAssignMaterialByCollectionIdByMaterialId({
            ...options,
            ...localOptions,
            throwOnError: true,
          });
        return data;
      },
    };
    return mutationOptions;
  };

export const getApiCollectionsListMaterialsByCollectionIdQueryKey = (
  options: Options<GetApiCollectionsListMaterialsByCollectionIdData>
) => createQueryKey('getApiCollectionsListMaterialsByCollectionId', options);

/**
 * List Material
 * This endpoint retrieves a list of material assigned to a collection
 */
export const getApiCollectionsListMaterialsByCollectionIdOptions = (
  options: Options<GetApiCollectionsListMaterialsByCollectionIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollectionsListMaterialsByCollectionId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsListMaterialsByCollectionIdQueryKey(options),
  });
};

export const getApiCollectionsListMaterialsByCollectionIdInfiniteQueryKey = (
  options: Options<GetApiCollectionsListMaterialsByCollectionIdData>
): QueryKey<Options<GetApiCollectionsListMaterialsByCollectionIdData>> =>
  createQueryKey('getApiCollectionsListMaterialsByCollectionId', options, true);

/**
 * List Material
 * This endpoint retrieves a list of material assigned to a collection
 */
export const getApiCollectionsListMaterialsByCollectionIdInfiniteOptions = (
  options: Options<GetApiCollectionsListMaterialsByCollectionIdData>
) => {
  return infiniteQueryOptions<
    GetApiCollectionsListMaterialsByCollectionIdResponse,
    GetApiCollectionsListMaterialsByCollectionIdError,
    InfiniteData<GetApiCollectionsListMaterialsByCollectionIdResponse>,
    QueryKey<Options<GetApiCollectionsListMaterialsByCollectionIdData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiCollectionsListMaterialsByCollectionIdData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<
            Options<GetApiCollectionsListMaterialsByCollectionIdData>
          >[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiCollectionsListMaterialsByCollectionId({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey:
        getApiCollectionsListMaterialsByCollectionIdInfiniteQueryKey(options),
    }
  );
};

export const getApiCollectionsMaterialsQueryKey = (
  options: Options<GetApiCollectionsMaterialsData>
) => createQueryKey('getApiCollectionsMaterials', options);

/**
 * Get Collection Materials
 * This endpoint retrieves a list of collection material.
 */
export const getApiCollectionsMaterialsOptions = (
  options: Options<GetApiCollectionsMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollectionsMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsMaterialsQueryKey(options),
  });
};

export const getApiCollectionsMaterialsInfiniteQueryKey = (
  options: Options<GetApiCollectionsMaterialsData>
): QueryKey<Options<GetApiCollectionsMaterialsData>> =>
  createQueryKey('getApiCollectionsMaterials', options, true);

/**
 * Get Collection Materials
 * This endpoint retrieves a list of collection material.
 */
export const getApiCollectionsMaterialsInfiniteOptions = (
  options: Options<GetApiCollectionsMaterialsData>
) => {
  return infiniteQueryOptions<
    GetApiCollectionsMaterialsResponse,
    GetApiCollectionsMaterialsError,
    InfiniteData<GetApiCollectionsMaterialsResponse>,
    QueryKey<Options<GetApiCollectionsMaterialsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiCollectionsMaterialsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiCollectionsMaterialsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiCollectionsMaterials({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiCollectionsMaterialsInfiniteQueryKey(options),
    }
  );
};

export const postApiCollectionsMaterialsQueryKey = (
  options: Options<PostApiCollectionsMaterialsData>
) => createQueryKey('postApiCollectionsMaterials', options);

/**
 * Create Collection Material
 * This endpoint creates a new collection material.
 */
export const postApiCollectionsMaterialsOptions = (
  options: Options<PostApiCollectionsMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiCollectionsMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiCollectionsMaterialsQueryKey(options),
  });
};

/**
 * Create Collection Material
 * This endpoint creates a new collection material.
 */
export const postApiCollectionsMaterialsMutation = (
  options?: Partial<Options<PostApiCollectionsMaterialsData>>
): UseMutationOptions<
  PostApiCollectionsMaterialsResponse,
  PostApiCollectionsMaterialsError,
  Options<PostApiCollectionsMaterialsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiCollectionsMaterialsResponse,
    PostApiCollectionsMaterialsError,
    Options<PostApiCollectionsMaterialsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiCollectionsMaterials({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Collection Material
 * This endpoint deletes an existing collection material.
 */
export const deleteApiCollectionsMaterialsByIdMutation = (
  options?: Partial<Options<DeleteApiCollectionsMaterialsByIdData>>
): UseMutationOptions<
  DeleteApiCollectionsMaterialsByIdResponse,
  DeleteApiCollectionsMaterialsByIdError,
  Options<DeleteApiCollectionsMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiCollectionsMaterialsByIdResponse,
    DeleteApiCollectionsMaterialsByIdError,
    Options<DeleteApiCollectionsMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiCollectionsMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectionsMaterialsByIdQueryKey = (
  options: Options<GetApiCollectionsMaterialsByIdData>
) => createQueryKey('getApiCollectionsMaterialsById', options);

/**
 * Get Collection Material
 * This endpoint retrieves an existing collection material.
 */
export const getApiCollectionsMaterialsByIdOptions = (
  options: Options<GetApiCollectionsMaterialsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollectionsMaterialsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsMaterialsByIdQueryKey(options),
  });
};

/**
 * Update Collection Material
 * This endpoint updates an existing collection material.
 */
export const putApiCollectionsMaterialsByIdMutation = (
  options?: Partial<Options<PutApiCollectionsMaterialsByIdData>>
): UseMutationOptions<
  PutApiCollectionsMaterialsByIdResponse,
  PutApiCollectionsMaterialsByIdError,
  Options<PutApiCollectionsMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiCollectionsMaterialsByIdResponse,
    PutApiCollectionsMaterialsByIdError,
    Options<PutApiCollectionsMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiCollectionsMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiCollectionsUnassignMaterialByCollectionIdByMaterialIdQueryKey =
  (
    options: Options<PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdData>
  ) =>
    createQueryKey(
      'postApiCollectionsUnassignMaterialByCollectionIdByMaterialId',
      options
    );

/**
 * Unassign Material
 * This endpoint unassigns a material from a collection
 */
export const postApiCollectionsUnassignMaterialByCollectionIdByMaterialIdOptions =
  (
    options: Options<PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await postApiCollectionsUnassignMaterialByCollectionIdByMaterialId({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        postApiCollectionsUnassignMaterialByCollectionIdByMaterialIdQueryKey(
          options
        ),
    });
  };

/**
 * Unassign Material
 * This endpoint unassigns a material from a collection
 */
export const postApiCollectionsUnassignMaterialByCollectionIdByMaterialIdMutation =
  (
    options?: Partial<
      Options<PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdData>
    >
  ): UseMutationOptions<
    PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdResponse,
    PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdError,
    Options<PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdData>
  > => {
    const mutationOptions: UseMutationOptions<
      PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdResponse,
      PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdError,
      Options<PostApiCollectionsUnassignMaterialByCollectionIdByMaterialIdData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await postApiCollectionsUnassignMaterialByCollectionIdByMaterialId({
            ...options,
            ...localOptions,
            throwOnError: true,
          });
        return data;
      },
    };
    return mutationOptions;
  };

/**
 * Delete Collection
 * This endpoint deletes an existing collection.
 */
export const deleteApiCollectionsByIdMutation = (
  options?: Partial<Options<DeleteApiCollectionsByIdData>>
): UseMutationOptions<
  DeleteApiCollectionsByIdResponse,
  DeleteApiCollectionsByIdError,
  Options<DeleteApiCollectionsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiCollectionsByIdResponse,
    DeleteApiCollectionsByIdError,
    Options<DeleteApiCollectionsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiCollectionsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectionsByIdQueryKey = (
  options: Options<GetApiCollectionsByIdData>
) => createQueryKey('getApiCollectionsById', options);

/**
 * Get Collection
 * This endpoint retrieves an existing collection.
 */
export const getApiCollectionsByIdOptions = (
  options: Options<GetApiCollectionsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollectionsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsByIdQueryKey(options),
  });
};

/**
 * Update Collection
 * This endpoint updates an existing collection.
 */
export const putApiCollectionsByIdMutation = (
  options?: Partial<Options<PutApiCollectionsByIdData>>
): UseMutationOptions<
  PutApiCollectionsByIdResponse,
  PutApiCollectionsByIdError,
  Options<PutApiCollectionsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiCollectionsByIdResponse,
    PutApiCollectionsByIdError,
    Options<PutApiCollectionsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiCollectionsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMaterialsQueryKey = (
  options: Options<GetApiMaterialsData>
) => createQueryKey('getApiMaterials', options);

/**
 * Get Materials
 * This endpoint retrieves a list of material.
 */
export const getApiMaterialsOptions = (
  options: Options<GetApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsQueryKey(options),
  });
};

export const getApiMaterialsInfiniteQueryKey = (
  options: Options<GetApiMaterialsData>
): QueryKey<Options<GetApiMaterialsData>> =>
  createQueryKey('getApiMaterials', options, true);

/**
 * Get Materials
 * This endpoint retrieves a list of material.
 */
export const getApiMaterialsInfiniteOptions = (
  options: Options<GetApiMaterialsData>
) => {
  return infiniteQueryOptions<
    GetApiMaterialsResponse,
    GetApiMaterialsError,
    InfiniteData<GetApiMaterialsResponse>,
    QueryKey<Options<GetApiMaterialsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiMaterialsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiMaterialsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiMaterials({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiMaterialsInfiniteQueryKey(options),
    }
  );
};

export const postApiMaterialsQueryKey = (
  options: Options<PostApiMaterialsData>
) => createQueryKey('postApiMaterials', options);

/**
 * Create Material
 * This endpoint creates a new material.
 */
export const postApiMaterialsOptions = (
  options: Options<PostApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiMaterialsQueryKey(options),
  });
};

/**
 * Create Material
 * This endpoint creates a new material.
 */
export const postApiMaterialsMutation = (
  options?: Partial<Options<PostApiMaterialsData>>
): UseMutationOptions<
  PostApiMaterialsResponse,
  PostApiMaterialsError,
  Options<PostApiMaterialsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiMaterialsResponse,
    PostApiMaterialsError,
    Options<PostApiMaterialsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiMaterials({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Material
 * This endpoint deletes an existing material.
 */
export const deleteApiMaterialsByIdMutation = (
  options?: Partial<Options<DeleteApiMaterialsByIdData>>
): UseMutationOptions<
  DeleteApiMaterialsByIdResponse,
  DeleteApiMaterialsByIdError,
  Options<DeleteApiMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiMaterialsByIdResponse,
    DeleteApiMaterialsByIdError,
    Options<DeleteApiMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMaterialsByIdQueryKey = (
  options: Options<GetApiMaterialsByIdData>
) => createQueryKey('getApiMaterialsById', options);

/**
 * Get Material
 * This endpoint retrieves an existing material.
 */
export const getApiMaterialsByIdOptions = (
  options: Options<GetApiMaterialsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterialsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsByIdQueryKey(options),
  });
};

/**
 * Update Material
 * This endpoint updates an existing material.
 */
export const putApiMaterialsByIdMutation = (
  options?: Partial<Options<PutApiMaterialsByIdData>>
): UseMutationOptions<
  PutApiMaterialsByIdResponse,
  PutApiMaterialsByIdError,
  Options<PutApiMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiMaterialsByIdResponse,
    PutApiMaterialsByIdError,
    Options<PutApiMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesQueryKey = (options: Options<GetApiRolesData>) =>
  createQueryKey('getApiRoles', options);

/**
 * Get Roles
 * This endpoint retrieves a list of role.
 */
export const getApiRolesOptions = (options: Options<GetApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesQueryKey(options),
  });
};

export const getApiRolesInfiniteQueryKey = (
  options: Options<GetApiRolesData>
): QueryKey<Options<GetApiRolesData>> =>
  createQueryKey('getApiRoles', options, true);

/**
 * Get Roles
 * This endpoint retrieves a list of role.
 */
export const getApiRolesInfiniteOptions = (
  options: Options<GetApiRolesData>
) => {
  return infiniteQueryOptions<
    GetApiRolesResponse,
    GetApiRolesError,
    InfiniteData<GetApiRolesResponse>,
    QueryKey<Options<GetApiRolesData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiRolesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiRolesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiRoles({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiRolesInfiniteQueryKey(options),
    }
  );
};

export const postApiRolesQueryKey = (options: Options<PostApiRolesData>) =>
  createQueryKey('postApiRoles', options);

/**
 * Create Role
 * This endpoint creates a new role.
 */
export const postApiRolesOptions = (options: Options<PostApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiRolesQueryKey(options),
  });
};

/**
 * Create Role
 * This endpoint creates a new role.
 */
export const postApiRolesMutation = (
  options?: Partial<Options<PostApiRolesData>>
): UseMutationOptions<
  PostApiRolesResponse,
  PostApiRolesError,
  Options<PostApiRolesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiRolesResponse,
    PostApiRolesError,
    Options<PostApiRolesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiRoles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Role
 * This endpoint deletes an existing role.
 */
export const deleteApiRolesByIdMutation = (
  options?: Partial<Options<DeleteApiRolesByIdData>>
): UseMutationOptions<
  DeleteApiRolesByIdResponse,
  DeleteApiRolesByIdError,
  Options<DeleteApiRolesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiRolesByIdResponse,
    DeleteApiRolesByIdError,
    Options<DeleteApiRolesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiRolesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesByIdQueryKey = (
  options: Options<GetApiRolesByIdData>
) => createQueryKey('getApiRolesById', options);

/**
 * Get Role
 * This endpoint retrieves an existing role.
 */
export const getApiRolesByIdOptions = (
  options: Options<GetApiRolesByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRolesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesByIdQueryKey(options),
  });
};

/**
 * Update Role
 * This endpoint updates an existing role.
 */
export const putApiRolesByIdMutation = (
  options?: Partial<Options<PutApiRolesByIdData>>
): UseMutationOptions<
  PutApiRolesByIdResponse,
  PutApiRolesByIdError,
  Options<PutApiRolesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiRolesByIdResponse,
    PutApiRolesByIdError,
    Options<PutApiRolesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiRolesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsQueryKey = (
  options: Options<GetApiTransactionsData>
) => createQueryKey('getApiTransactions', options);

/**
 * Get Transactions
 * This endpoint retrieves a list of transaction.
 */
export const getApiTransactionsOptions = (
  options: Options<GetApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsQueryKey(options),
  });
};

export const getApiTransactionsInfiniteQueryKey = (
  options: Options<GetApiTransactionsData>
): QueryKey<Options<GetApiTransactionsData>> =>
  createQueryKey('getApiTransactions', options, true);

/**
 * Get Transactions
 * This endpoint retrieves a list of transaction.
 */
export const getApiTransactionsInfiniteOptions = (
  options: Options<GetApiTransactionsData>
) => {
  return infiniteQueryOptions<
    GetApiTransactionsResponse,
    GetApiTransactionsError,
    InfiniteData<GetApiTransactionsResponse>,
    QueryKey<Options<GetApiTransactionsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiTransactionsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiTransactionsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiTransactions({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiTransactionsInfiniteQueryKey(options),
    }
  );
};

export const postApiTransactionsQueryKey = (
  options: Options<PostApiTransactionsData>
) => createQueryKey('postApiTransactions', options);

/**
 * Create Transaction
 * This endpoint creates a new transaction.
 */
export const postApiTransactionsOptions = (
  options: Options<PostApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTransactionsQueryKey(options),
  });
};

/**
 * Create Transaction
 * This endpoint creates a new transaction.
 */
export const postApiTransactionsMutation = (
  options?: Partial<Options<PostApiTransactionsData>>
): UseMutationOptions<
  PostApiTransactionsResponse,
  PostApiTransactionsError,
  Options<PostApiTransactionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiTransactionsResponse,
    PostApiTransactionsError,
    Options<PostApiTransactionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTransactions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiTransactionsAssignMaterialByTransactionIdByMaterialIdQueryKey =
  (
    options: Options<PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdData>
  ) =>
    createQueryKey(
      'postApiTransactionsAssignMaterialByTransactionIdByMaterialId',
      options
    );

/**
 * Assign Material
 * This endpoint assigns a material to a transaction
 */
export const postApiTransactionsAssignMaterialByTransactionIdByMaterialIdOptions =
  (
    options: Options<PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await postApiTransactionsAssignMaterialByTransactionIdByMaterialId({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        postApiTransactionsAssignMaterialByTransactionIdByMaterialIdQueryKey(
          options
        ),
    });
  };

/**
 * Assign Material
 * This endpoint assigns a material to a transaction
 */
export const postApiTransactionsAssignMaterialByTransactionIdByMaterialIdMutation =
  (
    options?: Partial<
      Options<PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdData>
    >
  ): UseMutationOptions<
    PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdResponse,
    PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdError,
    Options<PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdData>
  > => {
    const mutationOptions: UseMutationOptions<
      PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdResponse,
      PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdError,
      Options<PostApiTransactionsAssignMaterialByTransactionIdByMaterialIdData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await postApiTransactionsAssignMaterialByTransactionIdByMaterialId({
            ...options,
            ...localOptions,
            throwOnError: true,
          });
        return data;
      },
    };
    return mutationOptions;
  };

export const getApiTransactionsListMaterialsByTransactionIdQueryKey = (
  options: Options<GetApiTransactionsListMaterialsByTransactionIdData>
) => createQueryKey('getApiTransactionsListMaterialsByTransactionId', options);

/**
 * List Material
 * This endpoint retrieves a list of material assigned to a transaction
 */
export const getApiTransactionsListMaterialsByTransactionIdOptions = (
  options: Options<GetApiTransactionsListMaterialsByTransactionIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactionsListMaterialsByTransactionId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsListMaterialsByTransactionIdQueryKey(options),
  });
};

export const getApiTransactionsListMaterialsByTransactionIdInfiniteQueryKey = (
  options: Options<GetApiTransactionsListMaterialsByTransactionIdData>
): QueryKey<Options<GetApiTransactionsListMaterialsByTransactionIdData>> =>
  createQueryKey(
    'getApiTransactionsListMaterialsByTransactionId',
    options,
    true
  );

/**
 * List Material
 * This endpoint retrieves a list of material assigned to a transaction
 */
export const getApiTransactionsListMaterialsByTransactionIdInfiniteOptions = (
  options: Options<GetApiTransactionsListMaterialsByTransactionIdData>
) => {
  return infiniteQueryOptions<
    GetApiTransactionsListMaterialsByTransactionIdResponse,
    GetApiTransactionsListMaterialsByTransactionIdError,
    InfiniteData<GetApiTransactionsListMaterialsByTransactionIdResponse>,
    QueryKey<Options<GetApiTransactionsListMaterialsByTransactionIdData>>,
    | number
    | Pick<
        QueryKey<
          Options<GetApiTransactionsListMaterialsByTransactionIdData>
        >[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<
            Options<GetApiTransactionsListMaterialsByTransactionIdData>
          >[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiTransactionsListMaterialsByTransactionId({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey:
        getApiTransactionsListMaterialsByTransactionIdInfiniteQueryKey(options),
    }
  );
};

export const getApiTransactionsMaterialsQueryKey = (
  options: Options<GetApiTransactionsMaterialsData>
) => createQueryKey('getApiTransactionsMaterials', options);

/**
 * Get Transaction Materials
 * This endpoint retrieves a list of transaction material.
 */
export const getApiTransactionsMaterialsOptions = (
  options: Options<GetApiTransactionsMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactionsMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsMaterialsQueryKey(options),
  });
};

export const getApiTransactionsMaterialsInfiniteQueryKey = (
  options: Options<GetApiTransactionsMaterialsData>
): QueryKey<Options<GetApiTransactionsMaterialsData>> =>
  createQueryKey('getApiTransactionsMaterials', options, true);

/**
 * Get Transaction Materials
 * This endpoint retrieves a list of transaction material.
 */
export const getApiTransactionsMaterialsInfiniteOptions = (
  options: Options<GetApiTransactionsMaterialsData>
) => {
  return infiniteQueryOptions<
    GetApiTransactionsMaterialsResponse,
    GetApiTransactionsMaterialsError,
    InfiniteData<GetApiTransactionsMaterialsResponse>,
    QueryKey<Options<GetApiTransactionsMaterialsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiTransactionsMaterialsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiTransactionsMaterialsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiTransactionsMaterials({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiTransactionsMaterialsInfiniteQueryKey(options),
    }
  );
};

export const postApiTransactionsMaterialsQueryKey = (
  options: Options<PostApiTransactionsMaterialsData>
) => createQueryKey('postApiTransactionsMaterials', options);

/**
 * Create Transaction Material
 * This endpoint creates a new transaction material.
 */
export const postApiTransactionsMaterialsOptions = (
  options: Options<PostApiTransactionsMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTransactionsMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTransactionsMaterialsQueryKey(options),
  });
};

/**
 * Create Transaction Material
 * This endpoint creates a new transaction material.
 */
export const postApiTransactionsMaterialsMutation = (
  options?: Partial<Options<PostApiTransactionsMaterialsData>>
): UseMutationOptions<
  PostApiTransactionsMaterialsResponse,
  PostApiTransactionsMaterialsError,
  Options<PostApiTransactionsMaterialsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiTransactionsMaterialsResponse,
    PostApiTransactionsMaterialsError,
    Options<PostApiTransactionsMaterialsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTransactionsMaterials({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Transaction Material
 * This endpoint deletes an existing transaction material.
 */
export const deleteApiTransactionsMaterialsByIdMutation = (
  options?: Partial<Options<DeleteApiTransactionsMaterialsByIdData>>
): UseMutationOptions<
  DeleteApiTransactionsMaterialsByIdResponse,
  DeleteApiTransactionsMaterialsByIdError,
  Options<DeleteApiTransactionsMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiTransactionsMaterialsByIdResponse,
    DeleteApiTransactionsMaterialsByIdError,
    Options<DeleteApiTransactionsMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiTransactionsMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsMaterialsByIdQueryKey = (
  options: Options<GetApiTransactionsMaterialsByIdData>
) => createQueryKey('getApiTransactionsMaterialsById', options);

/**
 * Get Transaction Material
 * This endpoint retrieves an existing transaction material.
 */
export const getApiTransactionsMaterialsByIdOptions = (
  options: Options<GetApiTransactionsMaterialsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactionsMaterialsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsMaterialsByIdQueryKey(options),
  });
};

/**
 * Update Transaction Material
 * This endpoint updates an existing transaction material.
 */
export const putApiTransactionsMaterialsByIdMutation = (
  options?: Partial<Options<PutApiTransactionsMaterialsByIdData>>
): UseMutationOptions<
  PutApiTransactionsMaterialsByIdResponse,
  PutApiTransactionsMaterialsByIdError,
  Options<PutApiTransactionsMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiTransactionsMaterialsByIdResponse,
    PutApiTransactionsMaterialsByIdError,
    Options<PutApiTransactionsMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiTransactionsMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiTransactionsUnassignMaterialByTransactionIdByMaterialIdQueryKey =
  (
    options: Options<PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdData>
  ) =>
    createQueryKey(
      'postApiTransactionsUnassignMaterialByTransactionIdByMaterialId',
      options
    );

/**
 * Unassign Material
 * This endpoint unassigns a material from a transaction
 */
export const postApiTransactionsUnassignMaterialByTransactionIdByMaterialIdOptions =
  (
    options: Options<PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await postApiTransactionsUnassignMaterialByTransactionIdByMaterialId({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        postApiTransactionsUnassignMaterialByTransactionIdByMaterialIdQueryKey(
          options
        ),
    });
  };

/**
 * Unassign Material
 * This endpoint unassigns a material from a transaction
 */
export const postApiTransactionsUnassignMaterialByTransactionIdByMaterialIdMutation =
  (
    options?: Partial<
      Options<PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdData>
    >
  ): UseMutationOptions<
    PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdResponse,
    PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdError,
    Options<PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdData>
  > => {
    const mutationOptions: UseMutationOptions<
      PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdResponse,
      PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdError,
      Options<PostApiTransactionsUnassignMaterialByTransactionIdByMaterialIdData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await postApiTransactionsUnassignMaterialByTransactionIdByMaterialId({
            ...options,
            ...localOptions,
            throwOnError: true,
          });
        return data;
      },
    };
    return mutationOptions;
  };

/**
 * Delete Transaction
 * This endpoint deletes an existing transaction.
 */
export const deleteApiTransactionsByIdMutation = (
  options?: Partial<Options<DeleteApiTransactionsByIdData>>
): UseMutationOptions<
  DeleteApiTransactionsByIdResponse,
  DeleteApiTransactionsByIdError,
  Options<DeleteApiTransactionsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiTransactionsByIdResponse,
    DeleteApiTransactionsByIdError,
    Options<DeleteApiTransactionsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiTransactionsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsByIdQueryKey = (
  options: Options<GetApiTransactionsByIdData>
) => createQueryKey('getApiTransactionsById', options);

/**
 * Get Transaction
 * This endpoint retrieves an existing transaction.
 */
export const getApiTransactionsByIdOptions = (
  options: Options<GetApiTransactionsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactionsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsByIdQueryKey(options),
  });
};

/**
 * Update Transaction
 * This endpoint updates an existing transaction.
 */
export const putApiTransactionsByIdMutation = (
  options?: Partial<Options<PutApiTransactionsByIdData>>
): UseMutationOptions<
  PutApiTransactionsByIdResponse,
  PutApiTransactionsByIdError,
  Options<PutApiTransactionsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiTransactionsByIdResponse,
    PutApiTransactionsByIdError,
    Options<PutApiTransactionsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiTransactionsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersQueryKey = (options: Options<GetApiUsersData>) =>
  createQueryKey('getApiUsers', options);

/**
 * Get Users
 * This endpoint retrieves a list of user.
 */
export const getApiUsersOptions = (options: Options<GetApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersQueryKey(options),
  });
};

export const getApiUsersInfiniteQueryKey = (
  options: Options<GetApiUsersData>
): QueryKey<Options<GetApiUsersData>> =>
  createQueryKey('getApiUsers', options, true);

/**
 * Get Users
 * This endpoint retrieves a list of user.
 */
export const getApiUsersInfiniteOptions = (
  options: Options<GetApiUsersData>
) => {
  return infiniteQueryOptions<
    GetApiUsersResponse,
    GetApiUsersError,
    InfiniteData<GetApiUsersResponse>,
    QueryKey<Options<GetApiUsersData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiUsersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiUsersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiUsersInfiniteQueryKey(options),
    }
  );
};

export const postApiUsersQueryKey = (options: Options<PostApiUsersData>) =>
  createQueryKey('postApiUsers', options);

/**
 * Create User
 * This endpoint creates a new user.
 */
export const postApiUsersOptions = (options: Options<PostApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersQueryKey(options),
  });
};

/**
 * Create User
 * This endpoint creates a new user.
 */
export const postApiUsersMutation = (
  options?: Partial<Options<PostApiUsersData>>
): UseMutationOptions<
  PostApiUsersResponse,
  PostApiUsersError,
  Options<PostApiUsersData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUsersResponse,
    PostApiUsersError,
    Options<PostApiUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUsersAssignRoleByUserIdByRoleIdQueryKey = (
  options: Options<PostApiUsersAssignRoleByUserIdByRoleIdData>
) => createQueryKey('postApiUsersAssignRoleByUserIdByRoleId', options);

/**
 * Assign Role
 * This endpoint assigns a role to a user
 */
export const postApiUsersAssignRoleByUserIdByRoleIdOptions = (
  options: Options<PostApiUsersAssignRoleByUserIdByRoleIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsersAssignRoleByUserIdByRoleId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersAssignRoleByUserIdByRoleIdQueryKey(options),
  });
};

/**
 * Assign Role
 * This endpoint assigns a role to a user
 */
export const postApiUsersAssignRoleByUserIdByRoleIdMutation = (
  options?: Partial<Options<PostApiUsersAssignRoleByUserIdByRoleIdData>>
): UseMutationOptions<
  PostApiUsersAssignRoleByUserIdByRoleIdResponse,
  PostApiUsersAssignRoleByUserIdByRoleIdError,
  Options<PostApiUsersAssignRoleByUserIdByRoleIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUsersAssignRoleByUserIdByRoleIdResponse,
    PostApiUsersAssignRoleByUserIdByRoleIdError,
    Options<PostApiUsersAssignRoleByUserIdByRoleIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsersAssignRoleByUserIdByRoleId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersListRolesByUserIdQueryKey = (
  options: Options<GetApiUsersListRolesByUserIdData>
) => createQueryKey('getApiUsersListRolesByUserId', options);

/**
 * List Role
 * This endpoint retrieves a list of role assigned to a user
 */
export const getApiUsersListRolesByUserIdOptions = (
  options: Options<GetApiUsersListRolesByUserIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsersListRolesByUserId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersListRolesByUserIdQueryKey(options),
  });
};

export const getApiUsersListRolesByUserIdInfiniteQueryKey = (
  options: Options<GetApiUsersListRolesByUserIdData>
): QueryKey<Options<GetApiUsersListRolesByUserIdData>> =>
  createQueryKey('getApiUsersListRolesByUserId', options, true);

/**
 * List Role
 * This endpoint retrieves a list of role assigned to a user
 */
export const getApiUsersListRolesByUserIdInfiniteOptions = (
  options: Options<GetApiUsersListRolesByUserIdData>
) => {
  return infiniteQueryOptions<
    GetApiUsersListRolesByUserIdResponse,
    GetApiUsersListRolesByUserIdError,
    InfiniteData<GetApiUsersListRolesByUserIdResponse>,
    QueryKey<Options<GetApiUsersListRolesByUserIdData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiUsersListRolesByUserIdData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiUsersListRolesByUserIdData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiUsersListRolesByUserId({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiUsersListRolesByUserIdInfiniteQueryKey(options),
    }
  );
};

export const postApiUsersUnassignRoleByUserIdByRoleIdQueryKey = (
  options: Options<PostApiUsersUnassignRoleByUserIdByRoleIdData>
) => createQueryKey('postApiUsersUnassignRoleByUserIdByRoleId', options);

/**
 * Unassign Role
 * This endpoint unassigns a role from a user
 */
export const postApiUsersUnassignRoleByUserIdByRoleIdOptions = (
  options: Options<PostApiUsersUnassignRoleByUserIdByRoleIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsersUnassignRoleByUserIdByRoleId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersUnassignRoleByUserIdByRoleIdQueryKey(options),
  });
};

/**
 * Unassign Role
 * This endpoint unassigns a role from a user
 */
export const postApiUsersUnassignRoleByUserIdByRoleIdMutation = (
  options?: Partial<Options<PostApiUsersUnassignRoleByUserIdByRoleIdData>>
): UseMutationOptions<
  PostApiUsersUnassignRoleByUserIdByRoleIdResponse,
  PostApiUsersUnassignRoleByUserIdByRoleIdError,
  Options<PostApiUsersUnassignRoleByUserIdByRoleIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUsersUnassignRoleByUserIdByRoleIdResponse,
    PostApiUsersUnassignRoleByUserIdByRoleIdError,
    Options<PostApiUsersUnassignRoleByUserIdByRoleIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsersUnassignRoleByUserIdByRoleId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User
 * This endpoint deletes an existing user.
 */
export const deleteApiUsersByIdMutation = (
  options?: Partial<Options<DeleteApiUsersByIdData>>
): UseMutationOptions<
  DeleteApiUsersByIdResponse,
  DeleteApiUsersByIdError,
  Options<DeleteApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiUsersByIdResponse,
    DeleteApiUsersByIdError,
    Options<DeleteApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersByIdQueryKey = (
  options: Options<GetApiUsersByIdData>
) => createQueryKey('getApiUsersById', options);

/**
 * Get User
 * This endpoint retrieves an existing user.
 */
export const getApiUsersByIdOptions = (
  options: Options<GetApiUsersByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsersById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersByIdQueryKey(options),
  });
};

/**
 * Update User
 * This endpoint updates an existing user.
 */
export const putApiUsersByIdMutation = (
  options?: Partial<Options<PutApiUsersByIdData>>
): UseMutationOptions<
  PutApiUsersByIdResponse,
  PutApiUsersByIdError,
  Options<PutApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiUsersByIdResponse,
    PutApiUsersByIdError,
    Options<PutApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
