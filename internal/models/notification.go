package models

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

// NotificationAction describes a clickable action attached to a notification,
// consisting of a destination and the label shown to the user. Both fields are required.
//
// Link is the absolute or relative URL/path the user should be taken to.
// LinkText is the human-readable label displayed for the action (e.g., button text).
type NotificationAction struct {
	Link     string `json:"link" gorm:"type:text;not null;"`
	LinkText string `json:"link_text" gorm:"type:text;not null;"`
}

// Notification represents a user-facing notification persisted in the database.
// It includes a unique identifier, a title and message for display, an optional
// action payload, and timestamps for creation and last update.
//
// Fields:
//   - Id: UUID primary key generated by the database.
//   - Title: Short, human-readable headline of the notification.
//   - Message: Detailed body text of the notification.
//   - Action: Optional NotificationAction metadata (stored as JSONB) describing
//     what should happen when the notification is acted on.
//   - CreatedAt: Timestamp when the notification was created.
//   - UpdatedAt: Timestamp when the notification was last updated.
type Notification struct {
	Id        uuid.UUID           `json:"id" gorm:"primaryKey;type:uuid;default:uuid_generate_v4();"`
	Title     string              `json:"title" gorm:"type:text;not null;"`
	Message   string              `json:"message" gorm:"type:text;not null;"`
	Action    *NotificationAction `json:"action" gorm:"type:jsonb;"`
	CreatedAt time.Time           `json:"created_at" gorm:"autoCreateTime;"`
	UpdatedAt time.Time           `json:"updated_at" gorm:"autoUpdateTime;"`
}

// Value implements the driver.Valuer interface for NotificationAction by returning
// its JSON-encoded representation for database storage. It returns an error if
// the value cannot be marshaled to JSON.
func (n NotificationAction) Value() (driver.Value, error) {
	return json.Marshal(n)
}

// Scan implements the sql.Scanner interface for NotificationAction by decoding
// a JSON-encoded []byte value from the database into n. It returns an error if
// the input is not a []byte or if JSON unmarshaling fails.
func (n *NotificationAction) Scan(value interface{}) error {
	bytes, ok := value.([]byte)

	if !ok {
		return fmt.Errorf("cannot convert %v to NotificationAction", value)
	}

	return json.Unmarshal(bytes, n)
}
